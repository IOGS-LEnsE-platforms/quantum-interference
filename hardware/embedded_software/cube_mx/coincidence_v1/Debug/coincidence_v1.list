
coincidence_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f8c  08003f8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f94  08003f94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003fa8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003fa8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013feb  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab6  00000000  00000000  0003406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001228  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e23  00000000  00000000  00037d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e433  00000000  00000000  00038b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016fa3  00000000  00000000  00056f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4a41  00000000  00000000  0006df41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bf8  00000000  00000000  00132984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  0013757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003f34 	.word	0x08003f34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003f34 	.word	0x08003f34

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051e:	2003      	movs	r0, #3
 8000520:	f000 f938 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f80d 	bl	8000544 <HAL_InitTick>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	e001      	b.n	800053a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000536:	f003 fb09 	bl	8003b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800053a:	79fb      	ldrb	r3, [r7, #7]

}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_InitTick+0x68>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d022      	beq.n	800059e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_InitTick+0x6c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_InitTick+0x68>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000564:	fbb1 f3f3 	udiv	r3, r1, r3
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f944 	bl	80007fa <HAL_SYSTICK_Config>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10f      	bne.n	8000598 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b0f      	cmp	r3, #15
 800057c:	d809      	bhi.n	8000592 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057e:	2200      	movs	r2, #0
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f04f 30ff 	mov.w	r0, #4294967295
 8000586:	f000 f910 	bl	80007aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_InitTick+0x70>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e007      	b.n	80005a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e004      	b.n	80005a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e001      	b.n	80005a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x1c>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000028 	.word	0x20000028
 80005d8:	20000004 	.word	0x20000004

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff40 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff90 	bl	80006e8 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5f 	bl	8000694 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff33 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa4 	bl	8000750 <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000812:	b480      	push	{r7}
 8000814:	b085      	sub	sp, #20
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d005      	beq.n	8000836 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2204      	movs	r2, #4
 800082e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e037      	b.n	80008a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f022 020e 	bic.w	r2, r2, #14
 8000844:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000854:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f022 0201 	bic.w	r2, r2, #1
 8000864:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f003 021f 	and.w	r2, r3, #31
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	2101      	movs	r1, #1
 8000874:	fa01 f202 	lsl.w	r2, r1, r2
 8000878:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000882:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000888:	2b00      	cmp	r3, #0
 800088a:	d00c      	beq.n	80008a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800089a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80008a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2201      	movs	r2, #1
 80008aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d00d      	beq.n	80008f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2204      	movs	r2, #4
 80008e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e047      	b.n	8000988 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 020e 	bic.w	r2, r2, #14
 8000906:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0201 	bic.w	r2, r2, #1
 8000916:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000922:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	f003 021f 	and.w	r2, r3, #31
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000944:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00c      	beq.n	8000968 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800095c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000966:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2201      	movs	r2, #1
 800096c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	4798      	blx	r3
    }
  }
  return status;
 8000988:	7bfb      	ldrb	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009a2:	e15a      	b.n	8000c5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	2101      	movs	r1, #1
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	fa01 f303 	lsl.w	r3, r1, r3
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f000 814c 	beq.w	8000c54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d005      	beq.n	80009d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d130      	bne.n	8000a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2203      	movs	r2, #3
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4013      	ands	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68da      	ldr	r2, [r3, #12]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	091b      	lsrs	r3, r3, #4
 8000a20:	f003 0201 	and.w	r2, r3, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0303 	and.w	r3, r3, #3
 8000a3e:	2b03      	cmp	r3, #3
 8000a40:	d017      	beq.n	8000a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d123      	bne.n	8000ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	08da      	lsrs	r2, r3, #3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3208      	adds	r2, #8
 8000a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	220f      	movs	r2, #15
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	691a      	ldr	r2, [r3, #16]
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	08da      	lsrs	r2, r3, #3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3208      	adds	r2, #8
 8000ac0:	6939      	ldr	r1, [r7, #16]
 8000ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0203 	and.w	r2, r3, #3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 80a6 	beq.w	8000c54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b08:	4b5b      	ldr	r3, [pc, #364]	; (8000c78 <HAL_GPIO_Init+0x2e4>)
 8000b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0c:	4a5a      	ldr	r2, [pc, #360]	; (8000c78 <HAL_GPIO_Init+0x2e4>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6613      	str	r3, [r2, #96]	; 0x60
 8000b14:	4b58      	ldr	r3, [pc, #352]	; (8000c78 <HAL_GPIO_Init+0x2e4>)
 8000b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b20:	4a56      	ldr	r2, [pc, #344]	; (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3302      	adds	r3, #2
 8000b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220f      	movs	r2, #15
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b4a:	d01f      	beq.n	8000b8c <HAL_GPIO_Init+0x1f8>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <HAL_GPIO_Init+0x2ec>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d019      	beq.n	8000b88 <HAL_GPIO_Init+0x1f4>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_GPIO_Init+0x2f0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d013      	beq.n	8000b84 <HAL_GPIO_Init+0x1f0>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <HAL_GPIO_Init+0x2f4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d00d      	beq.n	8000b80 <HAL_GPIO_Init+0x1ec>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a49      	ldr	r2, [pc, #292]	; (8000c8c <HAL_GPIO_Init+0x2f8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d007      	beq.n	8000b7c <HAL_GPIO_Init+0x1e8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a48      	ldr	r2, [pc, #288]	; (8000c90 <HAL_GPIO_Init+0x2fc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d101      	bne.n	8000b78 <HAL_GPIO_Init+0x1e4>
 8000b74:	2305      	movs	r3, #5
 8000b76:	e00a      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b78:	2306      	movs	r3, #6
 8000b7a:	e008      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e006      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b80:	2303      	movs	r3, #3
 8000b82:	e004      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b84:	2302      	movs	r3, #2
 8000b86:	e002      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <HAL_GPIO_Init+0x1fa>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	f002 0203 	and.w	r2, r2, #3
 8000b94:	0092      	lsls	r2, r2, #2
 8000b96:	4093      	lsls	r3, r2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b9e:	4937      	ldr	r1, [pc, #220]	; (8000c7c <HAL_GPIO_Init+0x2e8>)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bac:	4b39      	ldr	r3, [pc, #228]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bd0:	4a30      	ldr	r2, [pc, #192]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c00:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c24:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <HAL_GPIO_Init+0x300>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa22 f303 	lsr.w	r3, r2, r3
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f47f ae9d 	bne.w	80009a4 <HAL_GPIO_Init+0x10>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	371c      	adds	r7, #28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00
 8000c8c:	48001000 	.word	0x48001000
 8000c90:	48001400 	.word	0x48001400
 8000c94:	40010400 	.word	0x40010400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	695a      	ldr	r2, [r3, #20]
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f806 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e087      	b.n	8000e32 <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d106      	bne.n	8000d42 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fe69 	bl	8003a14 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d004      	beq.n	8000d64 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000d62:	d103      	bne.n	8000d6c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f023 031e 	bic.w	r3, r3, #30
 8000d6a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d003      	beq.n	8000d80 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_LPTIM_Init+0x12c>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	4b2f      	ldr	r3, [pc, #188]	; (8000e40 <HAL_LPTIM_Init+0x130>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000d90:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8000d96:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8000d9c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8000da2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d107      	bne.n	8000dc2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d004      	beq.n	8000dd4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000dd2:	d107      	bne.n	8000de4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d00a      	beq.n	8000e06 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000df8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8000dfe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_LPTIM_Init+0x134>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d107      	bne.n	8000e28 <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	dfff1f3f 	.word	0xdfff1f3f
 8000e40:	ff19f1fe 	.word	0xff19f1fe
 8000e44:	40007c00 	.word	0x40007c00

08000e48 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10d      	bne.n	8000e7a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2201      	movs	r2, #1
 8000e72:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 f882 	bl	8000f7e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d10d      	bne.n	8000ea4 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d106      	bne.n	8000ea4 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f877 	bl	8000f92 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d10d      	bne.n	8000ece <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d106      	bne.n	8000ece <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f86c 	bl	8000fa6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b08      	cmp	r3, #8
 8000eda:	d10d      	bne.n	8000ef8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d106      	bne.n	8000ef8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2208      	movs	r2, #8
 8000ef0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f000 f861 	bl	8000fba <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	2b10      	cmp	r3, #16
 8000f04:	d10d      	bne.n	8000f22 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d106      	bne.n	8000f22 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2210      	movs	r2, #16
 8000f1a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f856 	bl	8000fce <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	d10d      	bne.n	8000f4c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 0320 	and.w	r3, r3, #32
 8000f3a:	2b20      	cmp	r3, #32
 8000f3c:	d106      	bne.n	8000f4c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2220      	movs	r2, #32
 8000f44:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f84b 	bl	8000fe2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f56:	2b40      	cmp	r3, #64	; 0x40
 8000f58:	d10d      	bne.n	8000f76 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f64:	2b40      	cmp	r3, #64	; 0x40
 8000f66:	d106      	bne.n	8000f76 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f840 	bl	8000ff6 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d141      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800101a:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001026:	d131      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800102e:	4a46      	ldr	r2, [pc, #280]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	4b43      	ldr	r3, [pc, #268]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001040:	4a41      	ldr	r2, [pc, #260]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2232      	movs	r2, #50	; 0x32
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4a3f      	ldr	r2, [pc, #252]	; (8001150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105e:	e002      	b.n	8001066 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3b01      	subs	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	d102      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f2      	bne.n	8001060 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107a:	4b33      	ldr	r3, [pc, #204]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001086:	d158      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e057      	b.n	800113c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001092:	4a2d      	ldr	r2, [pc, #180]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800109c:	e04d      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a4:	d141      	bne.n	800112a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b2:	d131      	bne.n	8001118 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010cc:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2232      	movs	r2, #50	; 0x32
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010e0:	fba2 2303 	umull	r2, r3, r2, r3
 80010e4:	0c9b      	lsrs	r3, r3, #18
 80010e6:	3301      	adds	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ea:	e002      	b.n	80010f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fe:	d102      	bne.n	8001106 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f2      	bne.n	80010ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001112:	d112      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e011      	b.n	800113c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001128:	e007      	b.n	800113a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800112a:	4b07      	ldr	r3, [pc, #28]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001134:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001138:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40007000 	.word	0x40007000
 800114c:	20000008 	.word	0x20000008
 8001150:	431bde83 	.word	0x431bde83

08001154 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001162:	6093      	str	r3, [r2, #8]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e2fe      	b.n	8001784 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d075      	beq.n	800127e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001192:	4b97      	ldr	r3, [pc, #604]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800119c:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b0c      	cmp	r3, #12
 80011aa:	d102      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3e>
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d002      	beq.n	80011b8 <HAL_RCC_OscConfig+0x44>
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d10b      	bne.n	80011d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b8:	4b8d      	ldr	r3, [pc, #564]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d05b      	beq.n	800127c <HAL_RCC_OscConfig+0x108>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d157      	bne.n	800127c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e2d9      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d8:	d106      	bne.n	80011e8 <HAL_RCC_OscConfig+0x74>
 80011da:	4b85      	ldr	r3, [pc, #532]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a84      	ldr	r2, [pc, #528]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e01d      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x98>
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7e      	ldr	r2, [pc, #504]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7b      	ldr	r2, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0xb0>
 800120c:	4b78      	ldr	r3, [pc, #480]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a77      	ldr	r2, [pc, #476]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b75      	ldr	r3, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a74      	ldr	r2, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff f9d6 	bl	80005dc <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff f9d2 	bl	80005dc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e29e      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001246:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xc0>
 8001252:	e014      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff f9c2 	bl	80005dc <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff f9be 	bl	80005dc <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e28a      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800126e:	4b60      	ldr	r3, [pc, #384]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0xe8>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d075      	beq.n	8001376 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001294:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x136>
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_OscConfig+0x13c>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d11f      	bne.n	80012f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b0:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_OscConfig+0x154>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e25d      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	4946      	ldr	r1, [pc, #280]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f92f 	bl	8000544 <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d043      	beq.n	8001374 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e249      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d023      	beq.n	8001340 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001304:	f7ff f96a 	bl	80005dc <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff f966 	bl	80005dc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e232      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	061b      	lsls	r3, r3, #24
 8001338:	492d      	ldr	r1, [pc, #180]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]
 800133e:	e01a      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff f946 	bl	80005dc <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff f942 	bl	80005dc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e20e      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1e0>
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001374:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d041      	beq.n	8001406 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff f91f 	bl	80005dc <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff f91b 	bl	80005dc <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1e7      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ef      	beq.n	80013a2 <HAL_RCC_OscConfig+0x22e>
 80013c2:	e020      	b.n	8001406 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80013c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <HAL_RCC_OscConfig+0x27c>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff f902 	bl	80005dc <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013da:	e00d      	b.n	80013f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f8fe 	bl	80005dc <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d906      	bls.n	80013f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1ca      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f8:	4b8c      	ldr	r3, [pc, #560]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ea      	bne.n	80013dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80a6 	beq.w	8001560 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001418:	4b84      	ldr	r3, [pc, #528]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x2b4>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x2b6>
 8001428:	2300      	movs	r3, #0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00d      	beq.n	800144a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b7f      	ldr	r3, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001432:	4a7e      	ldr	r2, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6593      	str	r3, [r2, #88]	; 0x58
 800143a:	4b7c      	ldr	r3, [pc, #496]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001446:	2301      	movs	r3, #1
 8001448:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_RCC_OscConfig+0x4bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001452:	2b00      	cmp	r3, #0
 8001454:	d118      	bne.n	8001488 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001456:	4b76      	ldr	r3, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x4bc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a75      	ldr	r2, [pc, #468]	; (8001630 <HAL_RCC_OscConfig+0x4bc>)
 800145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001462:	f7ff f8bb 	bl	80005dc <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146a:	f7ff f8b7 	bl	80005dc <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e183      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147c:	4b6c      	ldr	r3, [pc, #432]	; (8001630 <HAL_RCC_OscConfig+0x4bc>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f0      	beq.n	800146a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d108      	bne.n	80014a2 <HAL_RCC_OscConfig+0x32e>
 8001490:	4b66      	ldr	r3, [pc, #408]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	4a65      	ldr	r2, [pc, #404]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a0:	e024      	b.n	80014ec <HAL_RCC_OscConfig+0x378>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d110      	bne.n	80014cc <HAL_RCC_OscConfig+0x358>
 80014aa:	4b60      	ldr	r3, [pc, #384]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b0:	4a5e      	ldr	r2, [pc, #376]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c0:	4a5a      	ldr	r2, [pc, #360]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x378>
 80014cc:	4b57      	ldr	r3, [pc, #348]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d2:	4a56      	ldr	r2, [pc, #344]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e2:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	f023 0304 	bic.w	r3, r3, #4
 80014e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d016      	beq.n	8001522 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff f872 	bl	80005dc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff f86e 	bl	80005dc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f241 3288 	movw	r2, #5000	; 0x1388
 800150a:	4293      	cmp	r3, r2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e138      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ed      	beq.n	80014fc <HAL_RCC_OscConfig+0x388>
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff f85b 	bl	80005dc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff f857 	bl	80005dc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e121      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1ed      	bne.n	800152a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800154e:	7ffb      	ldrb	r3, [r7, #31]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d105      	bne.n	8001560 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001554:	4b35      	ldr	r3, [pc, #212]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001558:	4a34      	ldr	r2, [pc, #208]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01c      	beq.n	80015ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001576:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800157a:	4a2c      	ldr	r2, [pc, #176]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff f82a 	bl	80005dc <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800158c:	f7ff f826 	bl	80005dc <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0f2      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80015a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0ef      	beq.n	800158c <HAL_RCC_OscConfig+0x418>
 80015ac:	e01b      	b.n	80015e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff f80d 	bl	80005dc <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c6:	f7ff f809 	bl	80005dc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0d5      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80015da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1ef      	bne.n	80015c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80c9 	beq.w	8001782 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	f000 8083 	beq.w	8001704 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d15e      	bne.n	80016c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7fe ffe3 	bl	80005dc <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	e00c      	b.n	8001634 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7fe ffdf 	bl	80005dc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d905      	bls.n	8001634 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0ab      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
 800162c:	40021000 	.word	0x40021000
 8001630:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001634:	4b55      	ldr	r3, [pc, #340]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ec      	bne.n	800161a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001640:	4b52      	ldr	r3, [pc, #328]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4b52      	ldr	r3, [pc, #328]	; (8001790 <HAL_RCC_OscConfig+0x61c>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6a11      	ldr	r1, [r2, #32]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001650:	3a01      	subs	r2, #1
 8001652:	0112      	lsls	r2, r2, #4
 8001654:	4311      	orrs	r1, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800165a:	0212      	lsls	r2, r2, #8
 800165c:	4311      	orrs	r1, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001662:	0852      	lsrs	r2, r2, #1
 8001664:	3a01      	subs	r2, #1
 8001666:	0552      	lsls	r2, r2, #21
 8001668:	4311      	orrs	r1, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800166e:	0852      	lsrs	r2, r2, #1
 8001670:	3a01      	subs	r2, #1
 8001672:	0652      	lsls	r2, r2, #25
 8001674:	4311      	orrs	r1, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800167a:	06d2      	lsls	r2, r2, #27
 800167c:	430a      	orrs	r2, r1
 800167e:	4943      	ldr	r1, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001680:	4313      	orrs	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a40      	ldr	r2, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x618>)
 800168a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800169a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169c:	f7fe ff9e 	bl	80005dc <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a4:	f7fe ff9a 	bl	80005dc <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e066      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x530>
 80016c2:	e05e      	b.n	8001782 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b31      	ldr	r3, [pc, #196]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a30      	ldr	r2, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7fe ff84 	bl	80005dc <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7fe ff80 	bl	80005dc <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04c      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	4b28      	ldr	r3, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4924      	ldr	r1, [pc, #144]	; (800178c <HAL_RCC_OscConfig+0x618>)
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_RCC_OscConfig+0x620>)
 80016fe:	4013      	ands	r3, r2
 8001700:	60cb      	str	r3, [r1, #12]
 8001702:	e03e      	b.n	8001782 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e039      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <HAL_RCC_OscConfig+0x618>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	429a      	cmp	r2, r3
 8001722:	d12c      	bne.n	800177e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	3b01      	subs	r3, #1
 8001730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d123      	bne.n	800177e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11b      	bne.n	800177e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d113      	bne.n	800177e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	3b01      	subs	r3, #1
 8001764:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d109      	bne.n	800177e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	3b01      	subs	r3, #1
 8001778:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177a:	429a      	cmp	r2, r3
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	019f800c 	.word	0x019f800c
 8001794:	feeefffc 	.word	0xfeeefffc

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e11e      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 030f 	and.w	r3, r3, #15
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d910      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b8e      	ldr	r3, [pc, #568]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 020f 	bic.w	r2, r3, #15
 80017c6:	498c      	ldr	r1, [pc, #560]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b8a      	ldr	r3, [pc, #552]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e106      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d073      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d129      	bne.n	8001848 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0f4      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001804:	f000 f99e 	bl	8001b44 <RCC_GetSysClockFreqFromPLLSource>
 8001808:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	4a7c      	ldr	r2, [pc, #496]	; (8001a00 <HAL_RCC_ClockConfig+0x268>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d93f      	bls.n	8001892 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001826:	2b00      	cmp	r3, #0
 8001828:	d033      	beq.n	8001892 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d12f      	bne.n	8001892 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800183a:	4a70      	ldr	r2, [pc, #448]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e024      	b.n	8001892 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d107      	bne.n	8001860 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d109      	bne.n	8001870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0c6      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0be      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001870:	f000 f8ce 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8001874:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4a61      	ldr	r2, [pc, #388]	; (8001a00 <HAL_RCC_ClockConfig+0x268>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d909      	bls.n	8001892 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800187e:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001886:	4a5d      	ldr	r2, [pc, #372]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800188c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4957      	ldr	r1, [pc, #348]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a4:	f7fe fe9a 	bl	80005dc <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7fe fe96 	bl	80005dc <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e095      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d023      	beq.n	8001928 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a42      	ldr	r2, [pc, #264]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80018f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001904:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800190c:	4a3b      	ldr	r2, [pc, #236]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 800190e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001912:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b39      	ldr	r3, [pc, #228]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4936      	ldr	r1, [pc, #216]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
 8001926:	e008      	b.n	800193a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2b80      	cmp	r3, #128	; 0x80
 800192c:	d105      	bne.n	800193a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a32      	ldr	r2, [pc, #200]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001938:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d21d      	bcs.n	8001984 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001948:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 020f 	bic.w	r2, r3, #15
 8001950:	4929      	ldr	r1, [pc, #164]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001958:	f7fe fe40 	bl	80005dc <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7fe fe3c 	bl	80005dc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e03b      	b.n	80019ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_RCC_ClockConfig+0x260>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d1ed      	bne.n	8001960 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4917      	ldr	r1, [pc, #92]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d009      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	490f      	ldr	r1, [pc, #60]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019c2:	f000 f825 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	490c      	ldr	r1, [pc, #48]	; (8001a04 <HAL_RCC_ClockConfig+0x26c>)
 80019d4:	5ccb      	ldrb	r3, [r1, r3]
 80019d6:	f003 031f 	and.w	r3, r3, #31
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x270>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x274>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdac 	bl	8000544 <HAL_InitTick>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000
 80019fc:	40021000 	.word	0x40021000
 8001a00:	04c4b400 	.word	0x04c4b400
 8001a04:	08003f74 	.word	0x08003f74
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	20000000 	.word	0x20000000

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a16:	4b2c      	ldr	r3, [pc, #176]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a22:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e047      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d102      	bne.n	8001a3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e03e      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
 8001a42:	2b0c      	cmp	r3, #12
 8001a44:	d136      	bne.n	8001ab4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d10c      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	68d2      	ldr	r2, [r2, #12]
 8001a70:	0a12      	lsrs	r2, r2, #8
 8001a72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
      break;
 8001a7c:	e00c      	b.n	8001a98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a88:	68d2      	ldr	r2, [r2, #12]
 8001a8a:	0a12      	lsrs	r2, r2, #8
 8001a8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
      break;
 8001a96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0e5b      	lsrs	r3, r3, #25
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e001      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ab8:	693b      	ldr	r3, [r7, #16]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	00f42400 	.word	0x00f42400
 8001ad0:	007a1200 	.word	0x007a1200

08001ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000008 	.word	0x20000008

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001af0:	f7ff fff0 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	f003 031f 	and.w	r3, r3, #31
 8001b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	08003f84 	.word	0x08003f84

08001b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b1c:	f7ff ffda 	bl	8001ad4 <HAL_RCC_GetHCLKFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0adb      	lsrs	r3, r3, #11
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	4904      	ldr	r1, [pc, #16]	; (8001b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	08003f84 	.word	0x08003f84

08001b44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d10c      	bne.n	8001b82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b68:	4a17      	ldr	r2, [pc, #92]	; (8001bc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b72:	68d2      	ldr	r2, [r2, #12]
 8001b74:	0a12      	lsrs	r2, r2, #8
 8001b76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
    break;
 8001b80:	e00c      	b.n	8001b9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8c:	68d2      	ldr	r2, [r2, #12]
 8001b8e:	0a12      	lsrs	r2, r2, #8
 8001b90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    break;
 8001b9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0e5b      	lsrs	r3, r3, #25
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	371c      	adds	r7, #28
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	007a1200 	.word	0x007a1200
 8001bcc:	00f42400 	.word	0x00f42400

08001bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bd8:	2300      	movs	r3, #0
 8001bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bdc:	2300      	movs	r3, #0
 8001bde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8098 	beq.w	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a3f      	ldr	r2, [pc, #252]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c16:	2301      	movs	r3, #1
 8001c18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c1a:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a39      	ldr	r2, [pc, #228]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c26:	f7fe fcd9 	bl	80005dc <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c2c:	e009      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7fe fcd5 	bl	80005dc <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	74fb      	strb	r3, [r7, #19]
        break;
 8001c40:	e005      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ef      	beq.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c4e:	7cfb      	ldrb	r3, [r7, #19]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d159      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01e      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d019      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8c:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c9c:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d016      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe fc95 	bl	80005dc <HAL_GetTick>
 8001cb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb4:	e00b      	b.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7fe fc91 	bl	80005dc <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d902      	bls.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	74fb      	strb	r3, [r7, #19]
            break;
 8001ccc:	e006      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0ec      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001cdc:	7cfb      	ldrb	r3, [r7, #19]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10b      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	4903      	ldr	r1, [pc, #12]	; (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001cf8:	e008      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	74bb      	strb	r3, [r7, #18]
 8001cfe:	e005      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0c:	7c7b      	ldrb	r3, [r7, #17]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d105      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d12:	4ba6      	ldr	r3, [pc, #664]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4aa5      	ldr	r2, [pc, #660]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d2a:	4ba0      	ldr	r3, [pc, #640]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d30:	f023 0203 	bic.w	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	499c      	ldr	r1, [pc, #624]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d4c:	4b97      	ldr	r3, [pc, #604]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d52:	f023 020c 	bic.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	4994      	ldr	r1, [pc, #592]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d6e:	4b8f      	ldr	r3, [pc, #572]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	498b      	ldr	r1, [pc, #556]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d90:	4b86      	ldr	r3, [pc, #536]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	4983      	ldr	r1, [pc, #524]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001db2:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	497a      	ldr	r1, [pc, #488]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd4:	4b75      	ldr	r3, [pc, #468]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	4972      	ldr	r1, [pc, #456]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001df6:	4b6d      	ldr	r3, [pc, #436]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4969      	ldr	r1, [pc, #420]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e18:	4b64      	ldr	r3, [pc, #400]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4961      	ldr	r1, [pc, #388]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	4958      	ldr	r1, [pc, #352]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d015      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	4950      	ldr	r1, [pc, #320]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a4a      	ldr	r2, [pc, #296]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	4942      	ldr	r1, [pc, #264]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ebe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d015      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ecc:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f12:	4926      	ldr	r1, [pc, #152]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f22:	d105      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4a20      	ldr	r2, [pc, #128]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d015      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e049      	b.n	8002056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f001 fe84 	bl	8003ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3304      	adds	r3, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	f000 f9b6 	bl	8002360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01b      	beq.n	80020c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f06f 0202 	mvn.w	r2, #2
 8002092:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f93b 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 80020ae:	e005      	b.n	80020bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f92d 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f93e 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d020      	beq.n	800210e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d01b      	beq.n	800210e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f06f 0204 	mvn.w	r2, #4
 80020de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f915 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 80020fa:	e005      	b.n	8002108 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f907 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f918 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01b      	beq.n	800215a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f06f 0208 	mvn.w	r2, #8
 800212a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8ef 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8002146:	e005      	b.n	8002154 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8e1 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8f2 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	2b00      	cmp	r3, #0
 8002162:	d020      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01b      	beq.n	80021a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f06f 0210 	mvn.w	r2, #16
 8002176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2208      	movs	r2, #8
 800217c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8c9 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8002192:	e005      	b.n	80021a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f8bb 	bl	8002310 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8cc 	bl	8002338 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00c      	beq.n	80021ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0201 	mvn.w	r2, #1
 80021c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f899 	bl	80022fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d104      	bne.n	80021de <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f95a 	bl	80024ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f952 	bl	80024c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00c      	beq.n	8002240 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f886 	bl	800234c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0220 	mvn.w	r2, #32
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f91a 	bl	8002498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f926 	bl	80024d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f91e 	bl	80024e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f916 	bl	80024fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f90e 	bl	8002510 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a42      	ldr	r2, [pc, #264]	; (800247c <TIM_Base_SetConfig+0x11c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00f      	beq.n	8002398 <TIM_Base_SetConfig+0x38>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237e:	d00b      	beq.n	8002398 <TIM_Base_SetConfig+0x38>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <TIM_Base_SetConfig+0x120>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d007      	beq.n	8002398 <TIM_Base_SetConfig+0x38>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <TIM_Base_SetConfig+0x124>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d003      	beq.n	8002398 <TIM_Base_SetConfig+0x38>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a3d      	ldr	r2, [pc, #244]	; (8002488 <TIM_Base_SetConfig+0x128>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d108      	bne.n	80023aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a33      	ldr	r2, [pc, #204]	; (800247c <TIM_Base_SetConfig+0x11c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01b      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b8:	d017      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <TIM_Base_SetConfig+0x120>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <TIM_Base_SetConfig+0x124>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00f      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2e      	ldr	r2, [pc, #184]	; (8002488 <TIM_Base_SetConfig+0x128>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00b      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a2d      	ldr	r2, [pc, #180]	; (800248c <TIM_Base_SetConfig+0x12c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <TIM_Base_SetConfig+0x130>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d003      	beq.n	80023ea <TIM_Base_SetConfig+0x8a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <TIM_Base_SetConfig+0x134>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d108      	bne.n	80023fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <TIM_Base_SetConfig+0x11c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00f      	beq.n	8002448 <TIM_Base_SetConfig+0xe8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a17      	ldr	r2, [pc, #92]	; (8002488 <TIM_Base_SetConfig+0x128>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d00b      	beq.n	8002448 <TIM_Base_SetConfig+0xe8>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a16      	ldr	r2, [pc, #88]	; (800248c <TIM_Base_SetConfig+0x12c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0xe8>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <TIM_Base_SetConfig+0x130>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0xe8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a14      	ldr	r2, [pc, #80]	; (8002494 <TIM_Base_SetConfig+0x134>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d103      	bne.n	8002450 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f023 0201 	bic.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	611a      	str	r2, [r3, #16]
  }
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40000400 	.word	0x40000400
 8002484:	40000800 	.word	0x40000800
 8002488:	40013400 	.word	0x40013400
 800248c:	40014000 	.word	0x40014000
 8002490:	40014400 	.word	0x40014400
 8002494:	40014800 	.word	0x40014800

08002498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e042      	b.n	80025bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fc3d 	bl	8003dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2224      	movs	r2, #36	; 0x24
 8002552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fe38 	bl	80031e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fb69 	bl	8002c4c <UART_SetConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e01b      	b.n	80025bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 feb7 	bl	8003328 <UART_CheckIdleState>
 80025ba:	4603      	mov	r3, r0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b0ba      	sub	sp, #232	; 0xe8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80025ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80025f2:	4013      	ands	r3, r2
 80025f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80025f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11b      	bne.n	8002638 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 82e3 	beq.w	8002bf4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	4798      	blx	r3
      }
      return;
 8002636:	e2dd      	b.n	8002bf4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8123 	beq.w	8002888 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002642:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002646:	4b8d      	ldr	r3, [pc, #564]	; (800287c <HAL_UART_IRQHandler+0x2b8>)
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800264e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002652:	4b8b      	ldr	r3, [pc, #556]	; (8002880 <HAL_UART_IRQHandler+0x2bc>)
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8116 	beq.w	8002888 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800265c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	d011      	beq.n	800268c <HAL_UART_IRQHandler+0xc8>
 8002668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800268c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d011      	beq.n	80026bc <HAL_UART_IRQHandler+0xf8>
 8002698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2202      	movs	r2, #2
 80026aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f043 0204 	orr.w	r2, r3, #4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d011      	beq.n	80026ec <HAL_UART_IRQHandler+0x128>
 80026c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00b      	beq.n	80026ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2204      	movs	r2, #4
 80026da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002704:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002708:	4b5c      	ldr	r3, [pc, #368]	; (800287c <HAL_UART_IRQHandler+0x2b8>)
 800270a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00b      	beq.n	8002728 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2208      	movs	r2, #8
 8002716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f043 0208 	orr.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800272c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002730:	2b00      	cmp	r3, #0
 8002732:	d012      	beq.n	800275a <HAL_UART_IRQHandler+0x196>
 8002734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002738:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00c      	beq.n	800275a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002748:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8249 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d013      	beq.n	800279a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002776:	f003 0320 	and.w	r3, r3, #32
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800277e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ae:	2b40      	cmp	r3, #64	; 0x40
 80027b0:	d005      	beq.n	80027be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80027b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d054      	beq.n	8002868 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fec9 	bl	8003556 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d146      	bne.n	8002860 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3308      	adds	r3, #8
 80027d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3308      	adds	r3, #8
 80027fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800280a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1d9      	bne.n	80027d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d017      	beq.n	8002858 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_UART_IRQHandler+0x2c0>)
 8002830:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe f843 	bl	80008c4 <HAL_DMA_Abort_IT>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d019      	beq.n	8002878 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002852:	4610      	mov	r0, r2
 8002854:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002856:	e00f      	b.n	8002878 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f9e1 	bl	8002c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285e:	e00b      	b.n	8002878 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f9dd 	bl	8002c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002866:	e007      	b.n	8002878 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f9d9 	bl	8002c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002876:	e1bf      	b.n	8002bf8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	bf00      	nop
    return;
 800287a:	e1bd      	b.n	8002bf8 <HAL_UART_IRQHandler+0x634>
 800287c:	10000001 	.word	0x10000001
 8002880:	04000120 	.word	0x04000120
 8002884:	08003623 	.word	0x08003623

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288c:	2b01      	cmp	r3, #1
 800288e:	f040 8153 	bne.w	8002b38 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 814c 	beq.w	8002b38 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80028a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8145 	beq.w	8002b38 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2210      	movs	r2, #16
 80028b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	f040 80bb 	bne.w	8002a3c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 818f 	beq.w	8002bfc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80028e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f080 8187 	bcs.w	8002bfc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 8087 	bne.w	8002a1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800293a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002946:	e841 2300 	strex	r3, r2, [r1]
 800294a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1da      	bne.n	800290c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3308      	adds	r3, #8
 800295c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3308      	adds	r3, #8
 8002976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800297a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800297e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800298c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e1      	bne.n	8002956 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3308      	adds	r3, #8
 8002998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3308      	adds	r3, #8
 80029b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e3      	bne.n	8002992 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	f023 0310 	bic.w	r3, r3, #16
 80029ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80029fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e4      	bne.n	80029d8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fd fefc 	bl	8000812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8fd 	bl	8002c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a3a:	e0df      	b.n	8002bfc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80d1 	beq.w	8002c00 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80cc 	beq.w	8002c00 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	e853 3f00 	ldrex	r3, [r3]
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e4      	bne.n	8002a68 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	623b      	str	r3, [r7, #32]
   return(result);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ac6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ace:	e841 2300 	strex	r3, r2, [r1]
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1e1      	bne.n	8002a9e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	e853 3f00 	ldrex	r3, [r3]
 8002afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0310 	bic.w	r3, r3, #16
 8002b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69b9      	ldr	r1, [r7, #24]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e4      	bne.n	8002aee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f87f 	bl	8002c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b36:	e063      	b.n	8002c00 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00e      	beq.n	8002b62 <HAL_UART_IRQHandler+0x59e>
 8002b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fda2 	bl	80036a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b60:	e051      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d03a      	beq.n	8002c04 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	4798      	blx	r3
    }
    return;
 8002b96:	e035      	b.n	8002c04 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x5f4>
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fd4c 	bl	800364e <UART_EndTransmit_IT>
    return;
 8002bb6:	e026      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x614>
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fd7b 	bl	80036cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bd6:	e016      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <HAL_UART_IRQHandler+0x642>
 8002be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0c      	bge.n	8002c06 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fd63 	bl	80036b8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bf2:	e008      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
      return;
 8002bf4:	bf00      	nop
 8002bf6:	e006      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
    return;
 8002bf8:	bf00      	nop
 8002bfa:	e004      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
      return;
 8002bfc:	bf00      	nop
 8002bfe:	e002      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
      return;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <HAL_UART_IRQHandler+0x642>
    return;
 8002c04:	bf00      	nop
  }
}
 8002c06:	37e8      	adds	r7, #232	; 0xe8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c50:	b08c      	sub	sp, #48	; 0x30
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4bab      	ldr	r3, [pc, #684]	; (8002f28 <UART_SetConfig+0x2dc>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4aa0      	ldr	r2, [pc, #640]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d004      	beq.n	8002cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002cc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f023 010f 	bic.w	r1, r3, #15
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a91      	ldr	r2, [pc, #580]	; (8002f30 <UART_SetConfig+0x2e4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d125      	bne.n	8002d3c <UART_SetConfig+0xf0>
 8002cf0:	4b90      	ldr	r3, [pc, #576]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d81a      	bhi.n	8002d34 <UART_SetConfig+0xe8>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <UART_SetConfig+0xb8>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d15 	.word	0x08002d15
 8002d08:	08002d25 	.word	0x08002d25
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d2d 	.word	0x08002d2d
 8002d14:	2301      	movs	r3, #1
 8002d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1a:	e0d6      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d22:	e0d2      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d24:	2304      	movs	r3, #4
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2a:	e0ce      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d32:	e0ca      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d34:	2310      	movs	r3, #16
 8002d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	e0c6      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <UART_SetConfig+0x2ec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d138      	bne.n	8002db8 <UART_SetConfig+0x16c>
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d82d      	bhi.n	8002db0 <UART_SetConfig+0x164>
 8002d54:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0x110>)
 8002d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5a:	bf00      	nop
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002db1 	.word	0x08002db1
 8002d64:	08002db1 	.word	0x08002db1
 8002d68:	08002db1 	.word	0x08002db1
 8002d6c:	08002da1 	.word	0x08002da1
 8002d70:	08002db1 	.word	0x08002db1
 8002d74:	08002db1 	.word	0x08002db1
 8002d78:	08002db1 	.word	0x08002db1
 8002d7c:	08002d99 	.word	0x08002d99
 8002d80:	08002db1 	.word	0x08002db1
 8002d84:	08002db1 	.word	0x08002db1
 8002d88:	08002db1 	.word	0x08002db1
 8002d8c:	08002da9 	.word	0x08002da9
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d96:	e098      	b.n	8002eca <UART_SetConfig+0x27e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9e:	e094      	b.n	8002eca <UART_SetConfig+0x27e>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da6:	e090      	b.n	8002eca <UART_SetConfig+0x27e>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dae:	e08c      	b.n	8002eca <UART_SetConfig+0x27e>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db6:	e088      	b.n	8002eca <UART_SetConfig+0x27e>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5f      	ldr	r2, [pc, #380]	; (8002f3c <UART_SetConfig+0x2f0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d125      	bne.n	8002e0e <UART_SetConfig+0x1c2>
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d016      	beq.n	8002dfe <UART_SetConfig+0x1b2>
 8002dd0:	2b30      	cmp	r3, #48	; 0x30
 8002dd2:	d818      	bhi.n	8002e06 <UART_SetConfig+0x1ba>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d00a      	beq.n	8002dee <UART_SetConfig+0x1a2>
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d814      	bhi.n	8002e06 <UART_SetConfig+0x1ba>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <UART_SetConfig+0x19a>
 8002de0:	2b10      	cmp	r3, #16
 8002de2:	d008      	beq.n	8002df6 <UART_SetConfig+0x1aa>
 8002de4:	e00f      	b.n	8002e06 <UART_SetConfig+0x1ba>
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dec:	e06d      	b.n	8002eca <UART_SetConfig+0x27e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002df4:	e069      	b.n	8002eca <UART_SetConfig+0x27e>
 8002df6:	2304      	movs	r3, #4
 8002df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dfc:	e065      	b.n	8002eca <UART_SetConfig+0x27e>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e04:	e061      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e06:	2310      	movs	r3, #16
 8002e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e0c:	e05d      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4b      	ldr	r2, [pc, #300]	; (8002f40 <UART_SetConfig+0x2f4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d125      	bne.n	8002e64 <UART_SetConfig+0x218>
 8002e18:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e22:	2bc0      	cmp	r3, #192	; 0xc0
 8002e24:	d016      	beq.n	8002e54 <UART_SetConfig+0x208>
 8002e26:	2bc0      	cmp	r3, #192	; 0xc0
 8002e28:	d818      	bhi.n	8002e5c <UART_SetConfig+0x210>
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d00a      	beq.n	8002e44 <UART_SetConfig+0x1f8>
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d814      	bhi.n	8002e5c <UART_SetConfig+0x210>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <UART_SetConfig+0x1f0>
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d008      	beq.n	8002e4c <UART_SetConfig+0x200>
 8002e3a:	e00f      	b.n	8002e5c <UART_SetConfig+0x210>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e042      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e44:	2302      	movs	r3, #2
 8002e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e4a:	e03e      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e52:	e03a      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e54:	2308      	movs	r3, #8
 8002e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e5a:	e036      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e62:	e032      	b.n	8002eca <UART_SetConfig+0x27e>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d12a      	bne.n	8002ec4 <UART_SetConfig+0x278>
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <UART_SetConfig+0x2e8>)
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7c:	d01a      	beq.n	8002eb4 <UART_SetConfig+0x268>
 8002e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e82:	d81b      	bhi.n	8002ebc <UART_SetConfig+0x270>
 8002e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e88:	d00c      	beq.n	8002ea4 <UART_SetConfig+0x258>
 8002e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8e:	d815      	bhi.n	8002ebc <UART_SetConfig+0x270>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <UART_SetConfig+0x250>
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d008      	beq.n	8002eac <UART_SetConfig+0x260>
 8002e9a:	e00f      	b.n	8002ebc <UART_SetConfig+0x270>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea2:	e012      	b.n	8002eca <UART_SetConfig+0x27e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eaa:	e00e      	b.n	8002eca <UART_SetConfig+0x27e>
 8002eac:	2304      	movs	r3, #4
 8002eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb2:	e00a      	b.n	8002eca <UART_SetConfig+0x27e>
 8002eb4:	2308      	movs	r3, #8
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e006      	b.n	8002eca <UART_SetConfig+0x27e>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec2:	e002      	b.n	8002eca <UART_SetConfig+0x27e>
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	; (8002f2c <UART_SetConfig+0x2e0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f040 80a8 	bne.w	8003026 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d834      	bhi.n	8002f48 <UART_SetConfig+0x2fc>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x298>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f49 	.word	0x08002f49
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f49 	.word	0x08002f49
 8002ef4:	08002f17 	.word	0x08002f17
 8002ef8:	08002f49 	.word	0x08002f49
 8002efc:	08002f49 	.word	0x08002f49
 8002f00:	08002f49 	.word	0x08002f49
 8002f04:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7fe fdf0 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f0e:	e021      	b.n	8002f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <UART_SetConfig+0x2f8>)
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f14:	e01e      	b.n	8002f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7fe fd7b 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f1c:	e01a      	b.n	8002f54 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f24:	e016      	b.n	8002f54 <UART_SetConfig+0x308>
 8002f26:	bf00      	nop
 8002f28:	cfff69f3 	.word	0xcfff69f3
 8002f2c:	40008000 	.word	0x40008000
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40004400 	.word	0x40004400
 8002f3c:	40004800 	.word	0x40004800
 8002f40:	40004c00 	.word	0x40004c00
 8002f44:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 812a 	beq.w	80031b0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	4a9e      	ldr	r2, [pc, #632]	; (80031dc <UART_SetConfig+0x590>)
 8002f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d305      	bcc.n	8002f8c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d903      	bls.n	8002f94 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f92:	e10d      	b.n	80031b0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	2200      	movs	r2, #0
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	60fa      	str	r2, [r7, #12]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	4a8e      	ldr	r2, [pc, #568]	; (80031dc <UART_SetConfig+0x590>)
 8002fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb6:	f7fd f92f 	bl	8000218 <__aeabi_uldivmod>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	020b      	lsls	r3, r1, #8
 8002fcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fd0:	0202      	lsls	r2, r0, #8
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	6849      	ldr	r1, [r1, #4]
 8002fd6:	0849      	lsrs	r1, r1, #1
 8002fd8:	2000      	movs	r0, #0
 8002fda:	460c      	mov	r4, r1
 8002fdc:	4605      	mov	r5, r0
 8002fde:	eb12 0804 	adds.w	r8, r2, r4
 8002fe2:	eb43 0905 	adc.w	r9, r3, r5
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	469a      	mov	sl, r3
 8002fee:	4693      	mov	fp, r2
 8002ff0:	4652      	mov	r2, sl
 8002ff2:	465b      	mov	r3, fp
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd f90e 	bl	8000218 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4613      	mov	r3, r2
 8003002:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300a:	d308      	bcc.n	800301e <UART_SetConfig+0x3d2>
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003012:	d204      	bcs.n	800301e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	e0c8      	b.n	80031b0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003024:	e0c4      	b.n	80031b0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800302e:	d167      	bne.n	8003100 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003034:	2b08      	cmp	r3, #8
 8003036:	d828      	bhi.n	800308a <UART_SetConfig+0x43e>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <UART_SetConfig+0x3f4>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003065 	.word	0x08003065
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003075 	.word	0x08003075
 800304c:	0800308b 	.word	0x0800308b
 8003050:	0800307b 	.word	0x0800307b
 8003054:	0800308b 	.word	0x0800308b
 8003058:	0800308b 	.word	0x0800308b
 800305c:	0800308b 	.word	0x0800308b
 8003060:	08003083 	.word	0x08003083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7fe fd42 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8003068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800306a:	e014      	b.n	8003096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7fe fd54 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8003070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003072:	e010      	b.n	8003096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b5a      	ldr	r3, [pc, #360]	; (80031e0 <UART_SetConfig+0x594>)
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003078:	e00d      	b.n	8003096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7fe fcc9 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003080:	e009      	b.n	8003096 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003088:	e005      	b.n	8003096 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8089 	beq.w	80031b0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	4a4e      	ldr	r2, [pc, #312]	; (80031dc <UART_SetConfig+0x590>)
 80030a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b0:	005a      	lsls	r2, r3, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	441a      	add	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2b0f      	cmp	r3, #15
 80030c8:	d916      	bls.n	80030f8 <UART_SetConfig+0x4ac>
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d212      	bcs.n	80030f8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f023 030f 	bic.w	r3, r3, #15
 80030da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	8bfb      	ldrh	r3, [r7, #30]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	8bfa      	ldrh	r2, [r7, #30]
 80030f4:	60da      	str	r2, [r3, #12]
 80030f6:	e05b      	b.n	80031b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030fe:	e057      	b.n	80031b0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003100:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003104:	2b08      	cmp	r3, #8
 8003106:	d828      	bhi.n	800315a <UART_SetConfig+0x50e>
 8003108:	a201      	add	r2, pc, #4	; (adr r2, 8003110 <UART_SetConfig+0x4c4>)
 800310a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310e:	bf00      	nop
 8003110:	08003135 	.word	0x08003135
 8003114:	0800313d 	.word	0x0800313d
 8003118:	08003145 	.word	0x08003145
 800311c:	0800315b 	.word	0x0800315b
 8003120:	0800314b 	.word	0x0800314b
 8003124:	0800315b 	.word	0x0800315b
 8003128:	0800315b 	.word	0x0800315b
 800312c:	0800315b 	.word	0x0800315b
 8003130:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003134:	f7fe fcda 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8003138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800313a:	e014      	b.n	8003166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7fe fcec 	bl	8001b18 <HAL_RCC_GetPCLK2Freq>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003142:	e010      	b.n	8003166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b26      	ldr	r3, [pc, #152]	; (80031e0 <UART_SetConfig+0x594>)
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe fc61 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003150:	e009      	b.n	8003166 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003158:	e005      	b.n	8003166 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003164:	bf00      	nop
    }

    if (pclk != 0U)
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	d021      	beq.n	80031b0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <UART_SetConfig+0x590>)
 8003172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003176:	461a      	mov	r2, r3
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	fbb3 f2f2 	udiv	r2, r3, r2
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	441a      	add	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b0f      	cmp	r3, #15
 8003194:	d909      	bls.n	80031aa <UART_SetConfig+0x55e>
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d205      	bcs.n	80031aa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
 80031a8:	e002      	b.n	80031b0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2200      	movs	r2, #0
 80031ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80031cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3730      	adds	r7, #48	; 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031da:	bf00      	nop
 80031dc:	08003f4c 	.word	0x08003f4c
 80031e0:	00f42400 	.word	0x00f42400

080031e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032e2:	d10a      	bne.n	80032fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b098      	sub	sp, #96	; 0x60
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003338:	f7fd f950 	bl	80005dc <HAL_GetTick>
 800333c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b08      	cmp	r3, #8
 800334a:	d12f      	bne.n	80033ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f88e 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d022      	beq.n	80033ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800338a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800338c:	e841 2300 	strex	r3, r2, [r1]
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1e6      	bne.n	8003366 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e063      	b.n	8003474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d149      	bne.n	800344e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c2:	2200      	movs	r2, #0
 80033c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f857 	bl	800347c <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03c      	beq.n	800344e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
 80033f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e6      	bne.n	80033d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3308      	adds	r3, #8
 800340c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	60fb      	str	r3, [r7, #12]
   return(result);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	64bb      	str	r3, [r7, #72]	; 0x48
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3308      	adds	r3, #8
 8003424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003426:	61fa      	str	r2, [r7, #28]
 8003428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	617b      	str	r3, [r7, #20]
   return(result);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e5      	bne.n	8003406 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e012      	b.n	8003474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2220      	movs	r2, #32
 8003452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3758      	adds	r7, #88	; 0x58
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	4613      	mov	r3, r2
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348c:	e04f      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d04b      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003496:	f7fd f8a1 	bl	80005dc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d302      	bcc.n	80034ac <UART_WaitOnFlagUntilTimeout+0x30>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e04e      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d037      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d034      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b40      	cmp	r3, #64	; 0x40
 80034c8:	d031      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d110      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2208      	movs	r2, #8
 80034de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f838 	bl	8003556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2208      	movs	r2, #8
 80034ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e029      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003508:	d111      	bne.n	800352e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f81e 	bl	8003556 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69da      	ldr	r2, [r3, #28]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d0a0      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003556:	b480      	push	{r7}
 8003558:	b095      	sub	sp, #84	; 0x54
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800356c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357c:	643b      	str	r3, [r7, #64]	; 0x40
 800357e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e6      	bne.n	800355e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3308      	adds	r3, #8
 8003596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	61fb      	str	r3, [r7, #28]
   return(result);
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e3      	bne.n	8003590 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d118      	bne.n	8003602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0310 	bic.w	r3, r3, #16
 80035e4:	647b      	str	r3, [r7, #68]	; 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	613b      	str	r3, [r7, #16]
   return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e6      	bne.n	80035d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003616:	bf00      	nop
 8003618:	3754      	adds	r7, #84	; 0x54
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f7ff faed 	bl	8002c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b088      	sub	sp, #32
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60bb      	str	r3, [r7, #8]
   return(result);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	613b      	str	r3, [r7, #16]
   return(result);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e6      	bne.n	8003656 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fab8 	bl	8002c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e027      	b.n	8003746 <HAL_UARTEx_DisableFifoMode+0x66>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2224      	movs	r2, #36	; 0x24
 8003702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003724:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003766:	2302      	movs	r3, #2
 8003768:	e02d      	b.n	80037c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2224      	movs	r2, #36	; 0x24
 8003776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f850 	bl	800384c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e02d      	b.n	8003842 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	; 0x24
 80037f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f812 	bl	800384c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800386c:	e031      	b.n	80038d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800386e:	2308      	movs	r3, #8
 8003870:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003872:	2308      	movs	r3, #8
 8003874:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	0e5b      	lsrs	r3, r3, #25
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	0f5b      	lsrs	r3, r3, #29
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003896:	7bbb      	ldrb	r3, [r7, #14]
 8003898:	7b3a      	ldrb	r2, [r7, #12]
 800389a:	4911      	ldr	r1, [pc, #68]	; (80038e0 <UARTEx_SetNbDataToProcess+0x94>)
 800389c:	5c8a      	ldrb	r2, [r1, r2]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038a2:	7b3a      	ldrb	r2, [r7, #12]
 80038a4:	490f      	ldr	r1, [pc, #60]	; (80038e4 <UARTEx_SetNbDataToProcess+0x98>)
 80038a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	7b7a      	ldrb	r2, [r7, #13]
 80038b8:	4909      	ldr	r1, [pc, #36]	; (80038e0 <UARTEx_SetNbDataToProcess+0x94>)
 80038ba:	5c8a      	ldrb	r2, [r1, r2]
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038c0:	7b7a      	ldrb	r2, [r7, #13]
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <UARTEx_SetNbDataToProcess+0x98>)
 80038c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038d2:	bf00      	nop
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	08003f64 	.word	0x08003f64
 80038e4:	08003f6c 	.word	0x08003f6c

080038e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fe:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <MX_GPIO_Init+0xc8>)
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <MX_GPIO_Init+0xc8>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <MX_GPIO_Init+0xc8>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003916:	4b26      	ldr	r3, [pc, #152]	; (80039b0 <MX_GPIO_Init+0xc8>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <MX_GPIO_Init+0xc8>)
 800391c:	f043 0302 	orr.w	r3, r3, #2
 8003920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003922:	4b23      	ldr	r3, [pc, #140]	; (80039b0 <MX_GPIO_Init+0xc8>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800392e:	2200      	movs	r2, #0
 8003930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003934:	481f      	ldr	r0, [pc, #124]	; (80039b4 <MX_GPIO_Init+0xcc>)
 8003936:	f7fd f9af 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800393a:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 800393e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003940:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4619      	mov	r1, r3
 8003950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003954:	f7fd f81e 	bl	8000994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800395c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395e:	2301      	movs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	4619      	mov	r1, r3
 8003970:	4810      	ldr	r0, [pc, #64]	; (80039b4 <MX_GPIO_Init+0xcc>)
 8003972:	f7fd f80f 	bl	8000994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2100      	movs	r1, #0
 800397a:	200a      	movs	r0, #10
 800397c:	f7fc ff15 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003980:	200a      	movs	r0, #10
 8003982:	f7fc ff2c 	bl	80007de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003986:	2200      	movs	r2, #0
 8003988:	2100      	movs	r1, #0
 800398a:	2017      	movs	r0, #23
 800398c:	f7fc ff0d 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003990:	2017      	movs	r0, #23
 8003992:	f7fc ff24 	bl	80007de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2028      	movs	r0, #40	; 0x28
 800399c:	f7fc ff05 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039a0:	2028      	movs	r0, #40	; 0x28
 80039a2:	f7fc ff1c 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 80039a6:	bf00      	nop
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	48000400 	.word	0x48000400

080039b8 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <MX_LPTIM1_Init+0x58>)
 80039c0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ce:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039da:	2200      	movs	r2, #0
 80039dc:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80039f6:	4805      	ldr	r0, [pc, #20]	; (8003a0c <MX_LPTIM1_Init+0x54>)
 80039f8:	f7fd f98a 	bl	8000d10 <HAL_LPTIM_Init>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8003a02:	f000 f89d 	bl	8003b40 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000002c 	.word	0x2000002c
 8003a10:	40007c00 	.word	0x40007c00

08003a14 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b094      	sub	sp, #80	; 0x50
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2244      	movs	r2, #68	; 0x44
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fa58 	bl	8003eda <memset>
  if(lptimHandle->Instance==LPTIM1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <HAL_LPTIM_MspInit+0x70>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d122      	bne.n	8003a7a <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a38:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe f8c4 	bl	8001bd0 <HAL_RCCEx_PeriphCLKConfig>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8003a4e:	f000 f877 	bl	8003b40 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_LPTIM_MspInit+0x74>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_LPTIM_MspInit+0x74>)
 8003a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <HAL_LPTIM_MspInit+0x74>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	68bb      	ldr	r3, [r7, #8]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2031      	movs	r0, #49	; 0x31
 8003a70:	f7fc fe9b 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003a74:	2031      	movs	r0, #49	; 0x31
 8003a76:	f7fc feb2 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3750      	adds	r7, #80	; 0x50
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40007c00 	.word	0x40007c00
 8003a88:	40021000 	.word	0x40021000

08003a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a90:	f7fc fd40 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a94:	f000 f809 	bl	8003aaa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a98:	f7ff ff26 	bl	80038e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a9c:	f000 f948 	bl	8003d30 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8003aa0:	f7ff ff8a 	bl	80039b8 <MX_LPTIM1_Init>
  MX_TIM16_Init();
 8003aa4:	f000 f8f8 	bl	8003c98 <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <main+0x1c>

08003aaa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b094      	sub	sp, #80	; 0x50
 8003aae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ab0:	f107 0318 	add.w	r3, r7, #24
 8003ab4:	2238      	movs	r2, #56	; 0x38
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fa0e 	bl	8003eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7fd fa9d 	bl	800100c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003aec:	2355      	movs	r3, #85	; 0x55
 8003aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003af0:	2302      	movs	r3, #2
 8003af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003af4:	2302      	movs	r3, #2
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003af8:	2302      	movs	r3, #2
 8003afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003afc:	f107 0318 	add.w	r3, r7, #24
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fb37 	bl	8001174 <HAL_RCC_OscConfig>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003b0c:	f000 f818 	bl	8003b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b10:	230f      	movs	r3, #15
 8003b12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b14:	2303      	movs	r3, #3
 8003b16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b24:	1d3b      	adds	r3, r7, #4
 8003b26:	2104      	movs	r1, #4
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd fe35 	bl	8001798 <HAL_RCC_ClockConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003b34:	f000 f804 	bl	8003b40 <Error_Handler>
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3750      	adds	r7, #80	; 0x50
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b44:	b672      	cpsid	i
}
 8003b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <Error_Handler+0x8>
	...

08003b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <HAL_MspInit+0x44>)
 8003b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_MspInit+0x44>)
 8003b58:	f043 0301 	orr.w	r3, r3, #1
 8003b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <HAL_MspInit+0x44>)
 8003b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b09      	ldr	r3, [pc, #36]	; (8003b90 <HAL_MspInit+0x44>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	4a08      	ldr	r2, [pc, #32]	; (8003b90 <HAL_MspInit+0x44>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b74:	6593      	str	r3, [r2, #88]	; 0x58
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_MspInit+0x44>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b82:	f7fd fae7 	bl	8001154 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b98:	e7fe      	b.n	8003b98 <NMI_Handler+0x4>

08003b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <HardFault_Handler+0x4>

08003ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <MemManage_Handler+0x4>

08003ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003baa:	e7fe      	b.n	8003baa <BusFault_Handler+0x4>

08003bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bb0:	e7fe      	b.n	8003bb0 <UsageFault_Handler+0x4>

08003bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003be0:	f7fc fcea 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003bec:	2010      	movs	r0, #16
 8003bee:	f7fd f86b 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003bfa:	2020      	movs	r0, #32
 8003bfc:	f7fd f864 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003c00:	2040      	movs	r0, #64	; 0x40
 8003c02:	f7fd f861 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003c06:	2080      	movs	r0, #128	; 0x80
 8003c08:	f7fd f85e 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003c0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c10:	f7fd f85a 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003c14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003c18:	f7fd f856 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003c26:	f7fe fa1a 	bl	800205e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000064 	.word	0x20000064

08003c34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <USART2_IRQHandler+0x10>)
 8003c3a:	f7fe fcc3 	bl	80025c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200000b0 	.word	0x200000b0

08003c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c4c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c50:	f7fd f83a 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003c54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003c58:	f7fd f836 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003c64:	4802      	ldr	r0, [pc, #8]	; (8003c70 <LPTIM1_IRQHandler+0x10>)
 8003c66:	f7fd f8ef 	bl	8000e48 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000002c 	.word	0x2000002c

08003c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <SystemInit+0x20>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <SystemInit+0x20>)
 8003c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <MX_TIM16_Init+0x48>)
 8003ca0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50;
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003ca4:	2232      	movs	r2, #50	; 0x32
 8003ca6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cb6:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003cc8:	4804      	ldr	r0, [pc, #16]	; (8003cdc <MX_TIM16_Init+0x44>)
 8003cca:	f7fe f971 	bl	8001fb0 <HAL_TIM_Base_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003cd4:	f7ff ff34 	bl	8003b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000064 	.word	0x20000064
 8003ce0:	40014400 	.word	0x40014400

08003ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_TIM_Base_MspInit+0x44>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d00:	6613      	str	r3, [r2, #96]	; 0x60
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2100      	movs	r1, #0
 8003d12:	2019      	movs	r0, #25
 8003d14:	f7fc fd49 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003d18:	2019      	movs	r0, #25
 8003d1a:	f7fc fd60 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40014400 	.word	0x40014400
 8003d2c:	40021000 	.word	0x40021000

08003d30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d36:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <MX_USART2_UART_Init+0x94>)
 8003d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003d42:	4b1f      	ldr	r3, [pc, #124]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d48:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d4e:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d54:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d56:	220c      	movs	r2, #12
 8003d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d5a:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d6c:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d72:	4b13      	ldr	r3, [pc, #76]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d78:	4811      	ldr	r0, [pc, #68]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d7a:	f7fe fbd3 	bl	8002524 <HAL_UART_Init>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003d84:	f7ff fedc 	bl	8003b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d8c:	f7ff fce1 	bl	8003752 <HAL_UARTEx_SetTxFifoThreshold>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003d96:	f7ff fed3 	bl	8003b40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003d9e:	f7ff fd16 	bl	80037ce <HAL_UARTEx_SetRxFifoThreshold>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003da8:	f7ff feca 	bl	8003b40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003dac:	4804      	ldr	r0, [pc, #16]	; (8003dc0 <MX_USART2_UART_Init+0x90>)
 8003dae:	f7ff fc97 	bl	80036e0 <HAL_UARTEx_DisableFifoMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003db8:	f7ff fec2 	bl	8003b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200000b0 	.word	0x200000b0
 8003dc4:	40004400 	.word	0x40004400

08003dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b09a      	sub	sp, #104	; 0x68
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003de0:	f107 0310 	add.w	r3, r7, #16
 8003de4:	2244      	movs	r2, #68	; 0x44
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f876 	bl	8003eda <memset>
  if(uartHandle->Instance==USART2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a23      	ldr	r2, [pc, #140]	; (8003e80 <HAL_UART_MspInit+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d13e      	bne.n	8003e76 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e00:	f107 0310 	add.w	r3, r7, #16
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fd fee3 	bl	8001bd0 <HAL_RCCEx_PeriphCLKConfig>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e10:	f7ff fe96 	bl	8003b40 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e20:	4b18      	ldr	r3, [pc, #96]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2c:	4b15      	ldr	r3, [pc, #84]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_UART_MspInit+0xbc>)
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8003e44:	230c      	movs	r3, #12
 8003e46:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e50:	2300      	movs	r3, #0
 8003e52:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e54:	2307      	movs	r3, #7
 8003e56:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e62:	f7fc fd97 	bl	8000994 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	2026      	movs	r0, #38	; 0x26
 8003e6c:	f7fc fc9d 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e70:	2026      	movs	r0, #38	; 0x26
 8003e72:	f7fc fcb4 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e76:	bf00      	nop
 8003e78:	3768      	adds	r7, #104	; 0x68
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40021000 	.word	0x40021000

08003e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e88:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e8c:	f7ff fef2 	bl	8003c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e92:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <LoopForever+0xe>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003e98:	e002      	b.n	8003ea0 <LoopCopyDataInit>

08003e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9e:	3304      	adds	r3, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea4:	d3f9      	bcc.n	8003e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	; (8003ed4 <LoopForever+0x16>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eac:	e001      	b.n	8003eb2 <LoopFillZerobss>

08003eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb0:	3204      	adds	r2, #4

08003eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb4:	d3fb      	bcc.n	8003eae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003eb6:	f000 f819 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eba:	f7ff fde7 	bl	8003a8c <main>

08003ebe <LoopForever>:

LoopForever:
    b LoopForever
 8003ebe:	e7fe      	b.n	8003ebe <LoopForever>
  ldr   r0, =_estack
 8003ec0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003ecc:	08003f9c 	.word	0x08003f9c
  ldr r2, =_sbss
 8003ed0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003ed4:	20000144 	.word	0x20000144

08003ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <ADC1_2_IRQHandler>

08003eda <memset>:
 8003eda:	4402      	add	r2, r0
 8003edc:	4603      	mov	r3, r0
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d100      	bne.n	8003ee4 <memset+0xa>
 8003ee2:	4770      	bx	lr
 8003ee4:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee8:	e7f9      	b.n	8003ede <memset+0x4>
	...

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4d0d      	ldr	r5, [pc, #52]	; (8003f24 <__libc_init_array+0x38>)
 8003ef0:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef2:	1b64      	subs	r4, r4, r5
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	42a6      	cmp	r6, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	4d0b      	ldr	r5, [pc, #44]	; (8003f2c <__libc_init_array+0x40>)
 8003efe:	4c0c      	ldr	r4, [pc, #48]	; (8003f30 <__libc_init_array+0x44>)
 8003f00:	f000 f818 	bl	8003f34 <_init>
 8003f04:	1b64      	subs	r4, r4, r5
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	2600      	movs	r6, #0
 8003f0a:	42a6      	cmp	r6, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f14:	4798      	blx	r3
 8003f16:	3601      	adds	r6, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1e:	4798      	blx	r3
 8003f20:	3601      	adds	r6, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08003f94 	.word	0x08003f94
 8003f28:	08003f94 	.word	0x08003f94
 8003f2c:	08003f94 	.word	0x08003f94
 8003f30:	08003f98 	.word	0x08003f98

08003f34 <_init>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr

08003f40 <_fini>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr
