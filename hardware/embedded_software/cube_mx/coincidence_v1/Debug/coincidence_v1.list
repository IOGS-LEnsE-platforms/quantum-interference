
coincidence_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08004170  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004170  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147b9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b76  00000000  00000000  00034838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001238  00000000  00000000  000373b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2f  00000000  00000000  000385e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e47d  00000000  00000000  00039417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001700d  00000000  00000000  00057894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c77  00000000  00000000  0006e8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c48  00000000  00000000  00133518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  00138160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040fc 	.word	0x080040fc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080040fc 	.word	0x080040fc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800051a:	2300      	movs	r3, #0
 800051c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051e:	2003      	movs	r0, #3
 8000520:	f000 f95a 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f80d 	bl	8000544 <HAL_InitTick>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000530:	2301      	movs	r3, #1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	e001      	b.n	800053a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000536:	f003 fbed 	bl	8003d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800053a:	79fb      	ldrb	r3, [r7, #7]

}
 800053c:	4618      	mov	r0, r3
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <HAL_InitTick+0x68>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d022      	beq.n	800059e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_InitTick+0x6c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_InitTick+0x68>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000564:	fbb1 f3f3 	udiv	r3, r1, r3
 8000568:	fbb2 f3f3 	udiv	r3, r2, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f966 	bl	800083e <HAL_SYSTICK_Config>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10f      	bne.n	8000598 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b0f      	cmp	r3, #15
 800057c:	d809      	bhi.n	8000592 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057e:	2200      	movs	r2, #0
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	f04f 30ff 	mov.w	r0, #4294967295
 8000586:	f000 f932 	bl	80007ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800058a:	4a0a      	ldr	r2, [pc, #40]	; (80005b4 <HAL_InitTick+0x70>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	e007      	b.n	80005a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e004      	b.n	80005a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000598:	2301      	movs	r3, #1
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e001      	b.n	80005a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000008 	.word	0x20000008
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <HAL_IncTick+0x1c>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <HAL_IncTick+0x20>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <HAL_IncTick+0x1c>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000028 	.word	0x20000028
 80005d8:	20000004 	.word	0x20000004

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff ffee 	bl	80005dc <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d004      	beq.n	8000618 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_Delay+0x40>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000618:	bf00      	nop
 800061a:	f7ff ffdf 	bl	80005dc <HAL_GetTick>
 800061e:	4602      	mov	r2, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	429a      	cmp	r2, r3
 8000628:	d8f7      	bhi.n	800061a <HAL_Delay+0x26>
  {
  }
}
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000004 	.word	0x20000004

08000638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f003 0307 	and.w	r3, r3, #7
 8000646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000654:	4013      	ands	r3, r2
 8000656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066a:	4a04      	ldr	r2, [pc, #16]	; (800067c <__NVIC_SetPriorityGrouping+0x44>)
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	60d3      	str	r3, [r2, #12]
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <__NVIC_GetPriorityGrouping+0x18>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	f003 0307 	and.w	r3, r3, #7
}
 800068e:	4618      	mov	r0, r3
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db0b      	blt.n	80006c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 021f 	and.w	r2, r3, #31
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <__NVIC_EnableIRQ+0x38>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	095b      	lsrs	r3, r3, #5
 80006bc:	2001      	movs	r0, #1
 80006be:	fa00 f202 	lsl.w	r2, r0, r2
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	; (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	; (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	; 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	; 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff29 	bl	8000638 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff40 	bl	8000680 <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff90 	bl	800072c <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5f 	bl	80006d8 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff33 	bl	800069c <__NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffa4 	bl	8000794 <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d005      	beq.n	800087a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2204      	movs	r2, #4
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e037      	b.n	80008ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f022 020e 	bic.w	r2, r2, #14
 8000888:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000898:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0201 	bic.w	r2, r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f003 021f 	and.w	r2, r3, #31
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80008c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00c      	beq.n	80008ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80008e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2201      	movs	r2, #1
 80008ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800091a:	b2db      	uxtb	r3, r3
 800091c:	2b02      	cmp	r3, #2
 800091e:	d00d      	beq.n	800093c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2204      	movs	r2, #4
 8000924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2201      	movs	r2, #1
 800092a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	e047      	b.n	80009cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f022 020e 	bic.w	r2, r2, #14
 800094a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0201 	bic.w	r2, r2, #1
 800095a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800096a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000970:	f003 021f 	and.w	r2, r3, #31
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000988:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00c      	beq.n	80009ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800099c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80009a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80009aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2201      	movs	r2, #1
 80009b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	4798      	blx	r3
    }
  }
  return status;
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b087      	sub	sp, #28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009e6:	e15a      	b.n	8000c9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	2101      	movs	r1, #1
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 814c 	beq.w	8000c98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d005      	beq.n	8000a18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d130      	bne.n	8000a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68da      	ldr	r2, [r3, #12]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a4e:	2201      	movs	r2, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	f003 0201 	and.w	r2, r3, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 0303 	and.w	r3, r3, #3
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d017      	beq.n	8000ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	2203      	movs	r2, #3
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d123      	bne.n	8000b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	08da      	lsrs	r2, r3, #3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3208      	adds	r2, #8
 8000aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	220f      	movs	r2, #15
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	691a      	ldr	r2, [r3, #16]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	08da      	lsrs	r2, r3, #3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3208      	adds	r2, #8
 8000b04:	6939      	ldr	r1, [r7, #16]
 8000b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	2203      	movs	r2, #3
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0203 	and.w	r2, r3, #3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 80a6 	beq.w	8000c98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <HAL_GPIO_Init+0x2e4>)
 8000b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b50:	4a5a      	ldr	r2, [pc, #360]	; (8000cbc <HAL_GPIO_Init+0x2e4>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6613      	str	r3, [r2, #96]	; 0x60
 8000b58:	4b58      	ldr	r3, [pc, #352]	; (8000cbc <HAL_GPIO_Init+0x2e4>)
 8000b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b64:	4a56      	ldr	r2, [pc, #344]	; (8000cc0 <HAL_GPIO_Init+0x2e8>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	220f      	movs	r2, #15
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b8e:	d01f      	beq.n	8000bd0 <HAL_GPIO_Init+0x1f8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_GPIO_Init+0x2ec>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d019      	beq.n	8000bcc <HAL_GPIO_Init+0x1f4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a4b      	ldr	r2, [pc, #300]	; (8000cc8 <HAL_GPIO_Init+0x2f0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d013      	beq.n	8000bc8 <HAL_GPIO_Init+0x1f0>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <HAL_GPIO_Init+0x2f4>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00d      	beq.n	8000bc4 <HAL_GPIO_Init+0x1ec>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a49      	ldr	r2, [pc, #292]	; (8000cd0 <HAL_GPIO_Init+0x2f8>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0x1e8>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <HAL_GPIO_Init+0x2fc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d101      	bne.n	8000bbc <HAL_GPIO_Init+0x1e4>
 8000bb8:	2305      	movs	r3, #5
 8000bba:	e00a      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	e008      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e004      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x1fa>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4093      	lsls	r3, r2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000be2:	4937      	ldr	r1, [pc, #220]	; (8000cc0 <HAL_GPIO_Init+0x2e8>)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf0:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c14:	4a30      	ldr	r2, [pc, #192]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c3e:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c44:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <HAL_GPIO_Init+0x300>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f47f ae9d 	bne.w	80009e8 <HAL_GPIO_Init+0x10>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	48001000 	.word	0x48001000
 8000cd4:	48001400 	.word	0x48001400
 8000cd8:	40010400 	.word	0x40010400

08000cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cec:	787b      	ldrb	r3, [r7, #1]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cf8:	e002      	b.n	8000d00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfa:	887a      	ldrh	r2, [r7, #2]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f806 	bl	8000d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e087      	b.n	8000e76 <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d106      	bne.n	8000d86 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f002 ff11 	bl	8003ba8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2202      	movs	r2, #2
 8000d8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d004      	beq.n	8000da8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000da6:	d103      	bne.n	8000db0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f023 031e 	bic.w	r3, r3, #30
 8000dae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d003      	beq.n	8000dc4 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <HAL_LPTIM_Init+0x12c>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4b2f      	ldr	r3, [pc, #188]	; (8000e84 <HAL_LPTIM_Init+0x130>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000dd4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8000dda:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8000de0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8000de6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d107      	bne.n	8000e06 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d004      	beq.n	8000e18 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000e16:	d107      	bne.n	8000e28 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000e20:	4313      	orrs	r3, r2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d00a      	beq.n	8000e4a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e3c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8000e42:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68fa      	ldr	r2, [r7, #12]
 8000e50:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0c      	ldr	r2, [pc, #48]	; (8000e88 <HAL_LPTIM_Init+0x134>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d107      	bne.n	8000e6c <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	dfff1f3f 	.word	0xdfff1f3f
 8000e84:	ff19f1fe 	.word	0xff19f1fe
 8000e88:	40007c00 	.word	0x40007c00

08000e8c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10d      	bne.n	8000ebe <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d106      	bne.n	8000ebe <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 f882 	bl	8000fc2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d10d      	bne.n	8000ee8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d106      	bne.n	8000ee8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f877 	bl	8000fd6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d10d      	bne.n	8000f12 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d106      	bne.n	8000f12 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2204      	movs	r2, #4
 8000f0a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f86c 	bl	8000fea <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d10d      	bne.n	8000f3c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d106      	bne.n	8000f3c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2208      	movs	r2, #8
 8000f34:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f861 	bl	8000ffe <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d10d      	bne.n	8000f66 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d106      	bne.n	8000f66 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f856 	bl	8001012 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0320 	and.w	r3, r3, #32
 8000f70:	2b20      	cmp	r3, #32
 8000f72:	d10d      	bne.n	8000f90 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 0320 	and.w	r3, r3, #32
 8000f7e:	2b20      	cmp	r3, #32
 8000f80:	d106      	bne.n	8000f90 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2220      	movs	r2, #32
 8000f88:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f84b 	bl	8001026 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	2b40      	cmp	r3, #64	; 0x40
 8000f9c:	d10d      	bne.n	8000fba <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa8:	2b40      	cmp	r3, #64	; 0x40
 8000faa:	d106      	bne.n	8000fba <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2240      	movs	r2, #64	; 0x40
 8000fb2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 f840 	bl	800103a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d141      	bne.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106a:	d131      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001072:	4a46      	ldr	r2, [pc, #280]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800107c:	4b43      	ldr	r3, [pc, #268]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001084:	4a41      	ldr	r2, [pc, #260]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800108c:	4b40      	ldr	r3, [pc, #256]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2232      	movs	r2, #50	; 0x32
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4a3f      	ldr	r2, [pc, #252]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001098:	fba2 2303 	umull	r2, r3, r2, r3
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	3301      	adds	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a2:	e002      	b.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b6:	d102      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f2      	bne.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ca:	d158      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e057      	b.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010d6:	4a2d      	ldr	r2, [pc, #180]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010e0:	e04d      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e8:	d141      	bne.n	800116e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f6:	d131      	bne.n	800115c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2232      	movs	r2, #50	; 0x32
 800111e:	fb02 f303 	mul.w	r3, r2, r3
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	0c9b      	lsrs	r3, r3, #18
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112e:	e002      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3b01      	subs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001142:	d102      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f2      	bne.n	8001130 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001156:	d112      	bne.n	800117e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e011      	b.n	8001180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800116c:	e007      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	40007000 	.word	0x40007000
 8001190:	20000008 	.word	0x20000008
 8001194:	431bde83 	.word	0x431bde83

08001198 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6093      	str	r3, [r2, #8]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40007000 	.word	0x40007000

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e2fe      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d6:	4b97      	ldr	r3, [pc, #604]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011e0:	4b94      	ldr	r3, [pc, #592]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	d102      	bne.n	80011f6 <HAL_RCC_OscConfig+0x3e>
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d002      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b8d      	ldr	r3, [pc, #564]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e2d9      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b85      	ldr	r3, [pc, #532]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a84      	ldr	r2, [pc, #528]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b7f      	ldr	r3, [pc, #508]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a7e      	ldr	r2, [pc, #504]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b7c      	ldr	r3, [pc, #496]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a7b      	ldr	r2, [pc, #492]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b78      	ldr	r3, [pc, #480]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a77      	ldr	r2, [pc, #476]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b75      	ldr	r3, [pc, #468]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a74      	ldr	r2, [pc, #464]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff f9b4 	bl	80005dc <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff f9b0 	bl	80005dc <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e29e      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128a:	4b6a      	ldr	r3, [pc, #424]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff f9a0 	bl	80005dc <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff f99c 	bl	80005dc <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e28a      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b2:	4b60      	ldr	r3, [pc, #384]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d075      	beq.n	80013ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4b59      	ldr	r3, [pc, #356]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d8:	4b56      	ldr	r3, [pc, #344]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d102      	bne.n	80012ee <HAL_RCC_OscConfig+0x136>
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d002      	beq.n	80012f4 <HAL_RCC_OscConfig+0x13c>
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d11f      	bne.n	8001334 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f4:	4b4f      	ldr	r3, [pc, #316]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x154>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e25d      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	061b      	lsls	r3, r3, #24
 800131a:	4946      	ldr	r1, [pc, #280]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001320:	4b45      	ldr	r3, [pc, #276]	; (8001438 <HAL_RCC_OscConfig+0x280>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90d 	bl	8000544 <HAL_InitTick>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d043      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e249      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d023      	beq.n	8001384 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a3c      	ldr	r2, [pc, #240]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff f948 	bl	80005dc <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001350:	f7ff f944 	bl	80005dc <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e232      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001362:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	492d      	ldr	r1, [pc, #180]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
 8001382:	e01a      	b.n	80013ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001384:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a2a      	ldr	r2, [pc, #168]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800138a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff f924 	bl	80005dc <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001398:	f7ff f920 	bl	80005dc <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e20e      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1e0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d041      	beq.n	800144a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01c      	beq.n	8001408 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d4:	4a17      	ldr	r2, [pc, #92]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff f8fd 	bl	80005dc <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff f8f9 	bl	80005dc <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e1e7      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0ef      	beq.n	80013e6 <HAL_RCC_OscConfig+0x22e>
 8001406:	e020      	b.n	800144a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 800140a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_RCC_OscConfig+0x27c>)
 8001410:	f023 0301 	bic.w	r3, r3, #1
 8001414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff f8e0 	bl	80005dc <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141e:	e00d      	b.n	800143c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff f8dc 	bl	80005dc <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d906      	bls.n	800143c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e1ca      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143c:	4b8c      	ldr	r3, [pc, #560]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800143e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1ea      	bne.n	8001420 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 80a6 	beq.w	80015a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800145c:	4b84      	ldr	r3, [pc, #528]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_OscConfig+0x2b4>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x2b6>
 800146c:	2300      	movs	r3, #0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00d      	beq.n	800148e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	4a7e      	ldr	r2, [pc, #504]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6593      	str	r3, [r2, #88]	; 0x58
 800147e:	4b7c      	ldr	r3, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148e:	4b79      	ldr	r3, [pc, #484]	; (8001674 <HAL_RCC_OscConfig+0x4bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d118      	bne.n	80014cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x4bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x4bc>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a6:	f7ff f899 	bl	80005dc <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ae:	f7ff f895 	bl	80005dc <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e183      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	4b6c      	ldr	r3, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x4bc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0f0      	beq.n	80014ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d108      	bne.n	80014e6 <HAL_RCC_OscConfig+0x32e>
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014da:	4a65      	ldr	r2, [pc, #404]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e4:	e024      	b.n	8001530 <HAL_RCC_OscConfig+0x378>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d110      	bne.n	8001510 <HAL_RCC_OscConfig+0x358>
 80014ee:	4b60      	ldr	r3, [pc, #384]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	4a5a      	ldr	r2, [pc, #360]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150e:	e00f      	b.n	8001530 <HAL_RCC_OscConfig+0x378>
 8001510:	4b57      	ldr	r3, [pc, #348]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001516:	4a56      	ldr	r2, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001520:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	4a52      	ldr	r2, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001528:	f023 0304 	bic.w	r3, r3, #4
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d016      	beq.n	8001566 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff f850 	bl	80005dc <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff f84c 	bl	80005dc <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e138      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	4b46      	ldr	r3, [pc, #280]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0ed      	beq.n	8001540 <HAL_RCC_OscConfig+0x388>
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001566:	f7ff f839 	bl	80005dc <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800156c:	e00a      	b.n	8001584 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156e:	f7ff f835 	bl	80005dc <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	f241 3288 	movw	r2, #5000	; 0x1388
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e121      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001584:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ed      	bne.n	800156e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159c:	4a34      	ldr	r2, [pc, #208]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d03c      	beq.n	800162a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01c      	beq.n	80015f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015b8:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80015ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015be:	4a2c      	ldr	r2, [pc, #176]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff f808 	bl	80005dc <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d0:	f7ff f804 	bl	80005dc <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e0f2      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80015e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ef      	beq.n	80015d0 <HAL_RCC_OscConfig+0x418>
 80015f0:	e01b      	b.n	800162a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80015f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7fe ffeb 	bl	80005dc <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160a:	f7fe ffe7 	bl	80005dc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e0d5      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800161e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1ef      	bne.n	800160a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80c9 	beq.w	80017c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b0c      	cmp	r3, #12
 800163e:	f000 8083 	beq.w	8001748 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d15e      	bne.n	8001708 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7fe ffc1 	bl	80005dc <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800165c:	e00c      	b.n	8001678 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165e:	f7fe ffbd 	bl	80005dc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d905      	bls.n	8001678 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0ab      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ec      	bne.n	800165e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <HAL_RCC_OscConfig+0x61c>)
 800168a:	4013      	ands	r3, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6a11      	ldr	r1, [r2, #32]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001694:	3a01      	subs	r2, #1
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800169e:	0212      	lsls	r2, r2, #8
 80016a0:	4311      	orrs	r1, r2
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016a6:	0852      	lsrs	r2, r2, #1
 80016a8:	3a01      	subs	r2, #1
 80016aa:	0552      	lsls	r2, r2, #21
 80016ac:	4311      	orrs	r1, r2
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016b2:	0852      	lsrs	r2, r2, #1
 80016b4:	3a01      	subs	r2, #1
 80016b6:	0652      	lsls	r2, r2, #25
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016be:	06d2      	lsls	r2, r2, #27
 80016c0:	430a      	orrs	r2, r1
 80016c2:	4943      	ldr	r1, [pc, #268]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016d4:	4b3e      	ldr	r3, [pc, #248]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4a3d      	ldr	r2, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7fe ff7c 	bl	80005dc <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7fe ff78 	bl	80005dc <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e066      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0x530>
 8001706:	e05e      	b.n	80017c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a30      	ldr	r2, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 800170e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7fe ff62 	bl	80005dc <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7fe ff5e 	bl	80005dc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e04c      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800172e:	4b28      	ldr	r3, [pc, #160]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800173a:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	4924      	ldr	r1, [pc, #144]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_OscConfig+0x620>)
 8001742:	4013      	ands	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
 8001746:	e03e      	b.n	80017c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e039      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_OscConfig+0x618>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0203 	and.w	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d12c      	bne.n	80017c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d123      	bne.n	80017c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d11b      	bne.n	80017c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d113      	bne.n	80017c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	019f800c 	.word	0x019f800c
 80017d8:	feeefffc 	.word	0xfeeefffc

080017dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e11e      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b91      	ldr	r3, [pc, #580]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b8e      	ldr	r3, [pc, #568]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 020f 	bic.w	r2, r3, #15
 800180a:	498c      	ldr	r1, [pc, #560]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b8a      	ldr	r3, [pc, #552]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e106      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d073      	beq.n	8001918 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d129      	bne.n	800188c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e0f4      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001848:	f000 f99e 	bl	8001b88 <RCC_GetSysClockFreqFromPLLSource>
 800184c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a7c      	ldr	r2, [pc, #496]	; (8001a44 <HAL_RCC_ClockConfig+0x268>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d93f      	bls.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001856:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186a:	2b00      	cmp	r3, #0
 800186c:	d033      	beq.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001872:	2b00      	cmp	r3, #0
 8001874:	d12f      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800187e:	4a70      	ldr	r2, [pc, #448]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e024      	b.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001894:	4b6a      	ldr	r3, [pc, #424]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0c6      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0be      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018b4:	f000 f8ce 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4a61      	ldr	r2, [pc, #388]	; (8001a44 <HAL_RCC_ClockConfig+0x268>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d909      	bls.n	80018d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018c2:	4b5f      	ldr	r3, [pc, #380]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ca:	4a5d      	ldr	r2, [pc, #372]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4957      	ldr	r1, [pc, #348]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7fe fe78 	bl	80005dc <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7fe fe74 	bl	80005dc <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e095      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a42      	ldr	r2, [pc, #264]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800193a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001950:	4a3b      	ldr	r2, [pc, #236]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4936      	ldr	r1, [pc, #216]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
 800196a:	e008      	b.n	800197e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b80      	cmp	r3, #128	; 0x80
 8001970:	d105      	bne.n	800197e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001972:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001978:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d21d      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 020f 	bic.w	r2, r3, #15
 8001994:	4929      	ldr	r1, [pc, #164]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800199c:	f7fe fe1e 	bl	80005dc <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7fe fe1a 	bl	80005dc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e03b      	b.n	8001a32 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_RCC_ClockConfig+0x260>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1ed      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4917      	ldr	r1, [pc, #92]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	490f      	ldr	r1, [pc, #60]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a06:	f000 f825 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_RCC_ClockConfig+0x264>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	490c      	ldr	r1, [pc, #48]	; (8001a48 <HAL_RCC_ClockConfig+0x26c>)
 8001a18:	5ccb      	ldrb	r3, [r1, r3]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x270>)
 8001a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a26:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_RCC_ClockConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7fe fd8a 	bl	8000544 <HAL_InitTick>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	04c4b400 	.word	0x04c4b400
 8001a48:	0800413c 	.word	0x0800413c
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000000 	.word	0x20000000

08001a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a5a:	4b2c      	ldr	r3, [pc, #176]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d102      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e047      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d102      	bne.n	8001a7e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	e03e      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d136      	bne.n	8001af8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d10c      	bne.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aa8:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab2:	68d2      	ldr	r2, [r2, #12]
 8001ab4:	0a12      	lsrs	r2, r2, #8
 8001ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aba:	fb02 f303 	mul.w	r3, r2, r3
 8001abe:	617b      	str	r3, [r7, #20]
      break;
 8001ac0:	e00c      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001acc:	68d2      	ldr	r2, [r2, #12]
 8001ace:	0a12      	lsrs	r2, r2, #8
 8001ad0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
      break;
 8001ada:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0e5b      	lsrs	r3, r3, #25
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	e001      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001afc:	693b      	ldr	r3, [r7, #16]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	00f42400 	.word	0x00f42400
 8001b14:	007a1200 	.word	0x007a1200

08001b18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4904      	ldr	r1, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000
 8001b58:	0800414c 	.word	0x0800414c

08001b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b60:	f7ff ffda 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0adb      	lsrs	r3, r3, #11
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	0800414c 	.word	0x0800414c

08001b88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d10c      	bne.n	8001bc6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bb6:	68d2      	ldr	r2, [r2, #12]
 8001bb8:	0a12      	lsrs	r2, r2, #8
 8001bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bbe:	fb02 f303 	mul.w	r3, r2, r3
 8001bc2:	617b      	str	r3, [r7, #20]
    break;
 8001bc4:	e00c      	b.n	8001be0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd0:	68d2      	ldr	r2, [r2, #12]
 8001bd2:	0a12      	lsrs	r2, r2, #8
 8001bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    break;
 8001bde:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0e5b      	lsrs	r3, r3, #25
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bfa:	687b      	ldr	r3, [r7, #4]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	371c      	adds	r7, #28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	007a1200 	.word	0x007a1200
 8001c10:	00f42400 	.word	0x00f42400

08001c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c20:	2300      	movs	r3, #0
 8001c22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8098 	beq.w	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c6a:	f7fe fcb7 	bl	80005dc <HAL_GetTick>
 8001c6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c70:	e009      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c72:	f7fe fcb3 	bl	80005dc <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d902      	bls.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	74fb      	strb	r3, [r7, #19]
        break;
 8001c84:	e005      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c86:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ef      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c92:	7cfb      	ldrb	r3, [r7, #19]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d159      	bne.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ca2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01e      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d019      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ce0:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d016      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fc73 	bl	80005dc <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe fc6f 	bl	80005dc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d902      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d10:	e006      	b.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ec      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10b      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4903      	ldr	r1, [pc, #12]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d3c:	e008      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d3e:	7cfb      	ldrb	r3, [r7, #19]
 8001d40:	74bb      	strb	r3, [r7, #18]
 8001d42:	e005      	b.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d50:	7c7b      	ldrb	r3, [r7, #17]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4ba6      	ldr	r3, [pc, #664]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4aa5      	ldr	r2, [pc, #660]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d6e:	4ba0      	ldr	r3, [pc, #640]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d74:	f023 0203 	bic.w	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	499c      	ldr	r1, [pc, #624]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d90:	4b97      	ldr	r3, [pc, #604]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	f023 020c 	bic.w	r2, r3, #12
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4994      	ldr	r1, [pc, #592]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001db2:	4b8f      	ldr	r3, [pc, #572]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	498b      	ldr	r1, [pc, #556]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dd4:	4b86      	ldr	r3, [pc, #536]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	4983      	ldr	r1, [pc, #524]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001df6:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	497a      	ldr	r1, [pc, #488]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00a      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	4972      	ldr	r1, [pc, #456]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00a      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4969      	ldr	r1, [pc, #420]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00a      	beq.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4961      	ldr	r1, [pc, #388]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	4958      	ldr	r1, [pc, #352]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d015      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eae:	4950      	ldr	r1, [pc, #320]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ebe:	d105      	bne.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ec0:	4b4b      	ldr	r3, [pc, #300]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a4a      	ldr	r2, [pc, #296]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ed8:	4b45      	ldr	r3, [pc, #276]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	4942      	ldr	r1, [pc, #264]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a3c      	ldr	r2, [pc, #240]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f10:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4934      	ldr	r1, [pc, #208]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a2e      	ldr	r2, [pc, #184]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f56:	4926      	ldr	r1, [pc, #152]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a20      	ldr	r2, [pc, #128]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	4918      	ldr	r1, [pc, #96]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9e:	d105      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	490a      	ldr	r1, [pc, #40]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000

08001ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e049      	b.n	800209a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f001 ff46 	bl	8003eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2202      	movs	r2, #2
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f000 f9b6 	bl	80023a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01b      	beq.n	8002106 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f06f 0202 	mvn.w	r2, #2
 80020d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f93b 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 80020f2:	e005      	b.n	8002100 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f92d 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f93e 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01b      	beq.n	8002152 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f06f 0204 	mvn.w	r2, #4
 8002122:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f915 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 800213e:	e005      	b.n	800214c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f907 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f918 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d01b      	beq.n	800219e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f06f 0208 	mvn.w	r2, #8
 800216e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2204      	movs	r2, #4
 8002174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8ef 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 800218a:	e005      	b.n	8002198 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f8e1 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8f2 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d01b      	beq.n	80021ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f06f 0210 	mvn.w	r2, #16
 80021ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2208      	movs	r2, #8
 80021c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8c9 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 80021d6:	e005      	b.n	80021e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f8bb 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f8cc 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00c      	beq.n	800220e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f06f 0201 	mvn.w	r2, #1
 8002206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f899 	bl	8002340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00c      	beq.n	800223c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f95a 	bl	80024f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f952 	bl	8002504 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800227c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f886 	bl	8002390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f003 0320 	and.w	r3, r3, #32
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0220 	mvn.w	r2, #32
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f91a 	bl	80024dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00c      	beq.n	80022cc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f926 	bl	8002518 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f91e 	bl	800252c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f916 	bl	8002540 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f90e 	bl	8002554 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <TIM_Base_SetConfig+0x11c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00f      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d00b      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3f      	ldr	r2, [pc, #252]	; (80024c4 <TIM_Base_SetConfig+0x120>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3e      	ldr	r2, [pc, #248]	; (80024c8 <TIM_Base_SetConfig+0x124>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3d      	ldr	r2, [pc, #244]	; (80024cc <TIM_Base_SetConfig+0x128>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d108      	bne.n	80023ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <TIM_Base_SetConfig+0x11c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01b      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d017      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a30      	ldr	r2, [pc, #192]	; (80024c4 <TIM_Base_SetConfig+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <TIM_Base_SetConfig+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00f      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <TIM_Base_SetConfig+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00b      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <TIM_Base_SetConfig+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <TIM_Base_SetConfig+0x130>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2b      	ldr	r2, [pc, #172]	; (80024d8 <TIM_Base_SetConfig+0x134>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <TIM_Base_SetConfig+0x11c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00f      	beq.n	800248c <TIM_Base_SetConfig+0xe8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a17      	ldr	r2, [pc, #92]	; (80024cc <TIM_Base_SetConfig+0x128>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0xe8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <TIM_Base_SetConfig+0x12c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0xe8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <TIM_Base_SetConfig+0x130>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0xe8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <TIM_Base_SetConfig+0x134>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d103      	bne.n	8002494 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d105      	bne.n	80024b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f023 0201 	bic.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]
  }
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40000400 	.word	0x40000400
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40013400 	.word	0x40013400
 80024d0:	40014000 	.word	0x40014000
 80024d4:	40014400 	.word	0x40014400
 80024d8:	40014800 	.word	0x40014800

080024dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e042      	b.n	8002600 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f001 fcff 	bl	8003f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2224      	movs	r2, #36	; 0x24
 8002596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fee4 	bl	8003380 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fc15 	bl	8002de8 <UART_SetConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e01b      	b.n	8002600 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 ff63 	bl	80034c4 <UART_CheckIdleState>
 80025fe:	4603      	mov	r3, r0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	2b20      	cmp	r3, #32
 8002620:	d17b      	bne.n	800271a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_UART_Transmit+0x26>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e074      	b.n	800271c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2221      	movs	r2, #33	; 0x21
 800263e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002642:	f7fd ffcb 	bl	80005dc <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002660:	d108      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	e003      	b.n	800267c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800267c:	e030      	b.n	80026e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2200      	movs	r2, #0
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 ffc5 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e03d      	b.n	800271c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	3302      	adds	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e007      	b.n	80026ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1c8      	bne.n	800267e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2200      	movs	r2, #0
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 ff8e 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e006      	b.n	800271c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e000      	b.n	800271c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
  }
}
 800271c:	4618      	mov	r0, r3
 800271e:	3720      	adds	r7, #32
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0ba      	sub	sp, #232	; 0xe8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800274a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800274e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002752:	4013      	ands	r3, r2
 8002754:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11b      	bne.n	8002798 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d009      	beq.n	8002798 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8300 	beq.w	8002d8e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
      }
      return;
 8002796:	e2fa      	b.n	8002d8e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 8123 	beq.w	80029e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80027a6:	4b8d      	ldr	r3, [pc, #564]	; (80029dc <HAL_UART_IRQHandler+0x2b8>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027b2:	4b8b      	ldr	r3, [pc, #556]	; (80029e0 <HAL_UART_IRQHandler+0x2bc>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8116 	beq.w	80029e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d011      	beq.n	80027ec <HAL_UART_IRQHandler+0xc8>
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2201      	movs	r2, #1
 80027da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d011      	beq.n	800281c <HAL_UART_IRQHandler+0xf8>
 80027f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2202      	movs	r2, #2
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800281c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <HAL_UART_IRQHandler+0x128>
 8002828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2204      	movs	r2, #4
 800283a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002842:	f043 0202 	orr.w	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800284c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d017      	beq.n	8002888 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002864:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002868:	4b5c      	ldr	r3, [pc, #368]	; (80029dc <HAL_UART_IRQHandler+0x2b8>)
 800286a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2208      	movs	r2, #8
 8002876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f043 0208 	orr.w	r2, r3, #8
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_UART_IRQHandler+0x196>
 8002894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00c      	beq.n	80028ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8266 	beq.w	8002d92 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d013      	beq.n	80028fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d005      	beq.n	800291e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002916:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800291a:	2b00      	cmp	r3, #0
 800291c:	d054      	beq.n	80029c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fee7 	bl	80036f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d146      	bne.n	80029c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3308      	adds	r3, #8
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3308      	adds	r3, #8
 800295a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800296a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1d9      	bne.n	8002932 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <HAL_UART_IRQHandler+0x2c0>)
 8002990:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd ffb5 	bl	8000908 <HAL_DMA_Abort_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80029b2:	4610      	mov	r0, r2
 80029b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b6:	e00f      	b.n	80029d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f9ff 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029be:	e00b      	b.n	80029d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f9fb 	bl	8002dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	e007      	b.n	80029d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f9f7 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80029d6:	e1dc      	b.n	8002d92 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	bf00      	nop
    return;
 80029da:	e1da      	b.n	8002d92 <HAL_UART_IRQHandler+0x66e>
 80029dc:	10000001 	.word	0x10000001
 80029e0:	04000120 	.word	0x04000120
 80029e4:	080037bf 	.word	0x080037bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 8170 	bne.w	8002cd2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8169 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8162 	beq.w	8002cd2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2210      	movs	r2, #16
 8002a14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	f040 80d8 	bne.w	8002bd6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80af 	beq.w	8002b9c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f080 80a7 	bcs.w	8002b9c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8087 	bne.w	8002b7a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1da      	bne.n	8002a6c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3308      	adds	r3, #8
 8002abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e1      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3308      	adds	r3, #8
 8002af8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afc:	e853 3f00 	ldrex	r3, [r3]
 8002b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3308      	adds	r3, #8
 8002b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b1e:	e841 2300 	strex	r3, r2, [r1]
 8002b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1e3      	bne.n	8002af2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b48:	f023 0310 	bic.w	r3, r3, #16
 8002b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e4      	bne.n	8002b38 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fe6e 	bl	8000856 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4619      	mov	r1, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f91b 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002b9a:	e0fc      	b.n	8002d96 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ba2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f040 80f5 	bne.w	8002d96 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	f040 80eb 	bne.w	8002d96 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	671a      	str	r2, [r3, #112]	; 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8fe 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
      return;
 8002bd4:	e0df      	b.n	8002d96 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80d1 	beq.w	8002d9a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80cc 	beq.w	8002d9a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c24:	647b      	str	r3, [r7, #68]	; 0x44
 8002c26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c2c:	e841 2300 	strex	r3, r2, [r1]
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1e4      	bne.n	8002c02 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	623b      	str	r3, [r7, #32]
   return(result);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c60:	633a      	str	r2, [r7, #48]	; 0x30
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e1      	bne.n	8002c38 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f023 0310 	bic.w	r3, r3, #16
 8002c9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e4      	bne.n	8002c88 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f880 	bl	8002dd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cd0:	e063      	b.n	8002d9a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00e      	beq.n	8002cfc <HAL_UART_IRQHandler+0x5d8>
 8002cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d008      	beq.n	8002cfc <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fd9f 	bl	8003838 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cfa:	e051      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d014      	beq.n	8002d32 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d03a      	beq.n	8002d9e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    }
    return;
 8002d30:	e035      	b.n	8002d9e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_UART_IRQHandler+0x62e>
 8002d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fd49 	bl	80037e2 <UART_EndTransmit_IT>
    return;
 8002d50:	e026      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d009      	beq.n	8002d72 <HAL_UART_IRQHandler+0x64e>
 8002d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fd78 	bl	8003860 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d70:	e016      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d010      	beq.n	8002da0 <HAL_UART_IRQHandler+0x67c>
 8002d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	da0c      	bge.n	8002da0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fd60 	bl	800384c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d8c:	e008      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002d8e:	bf00      	nop
 8002d90:	e006      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
    return;
 8002d92:	bf00      	nop
 8002d94:	e004      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002d96:	bf00      	nop
 8002d98:	e002      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
      return;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <HAL_UART_IRQHandler+0x67c>
    return;
 8002d9e:	bf00      	nop
  }
}
 8002da0:	37e8      	adds	r7, #232	; 0xe8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop

08002da8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b08c      	sub	sp, #48	; 0x30
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	431a      	orrs	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4bab      	ldr	r3, [pc, #684]	; (80030c4 <UART_SetConfig+0x2dc>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4aa0      	ldr	r2, [pc, #640]	; (80030c8 <UART_SetConfig+0x2e0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d004      	beq.n	8002e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	4313      	orrs	r3, r2
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e72:	f023 010f 	bic.w	r1, r3, #15
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a91      	ldr	r2, [pc, #580]	; (80030cc <UART_SetConfig+0x2e4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d125      	bne.n	8002ed8 <UART_SetConfig+0xf0>
 8002e8c:	4b90      	ldr	r3, [pc, #576]	; (80030d0 <UART_SetConfig+0x2e8>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d81a      	bhi.n	8002ed0 <UART_SetConfig+0xe8>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0xb8>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec1 	.word	0x08002ec1
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ec9 	.word	0x08002ec9
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eb6:	e0d6      	b.n	8003066 <UART_SetConfig+0x27e>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ebe:	e0d2      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec6:	e0ce      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ec8:	2308      	movs	r3, #8
 8002eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ece:	e0ca      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed6:	e0c6      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7d      	ldr	r2, [pc, #500]	; (80030d4 <UART_SetConfig+0x2ec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d138      	bne.n	8002f54 <UART_SetConfig+0x16c>
 8002ee2:	4b7b      	ldr	r3, [pc, #492]	; (80030d0 <UART_SetConfig+0x2e8>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f003 030c 	and.w	r3, r3, #12
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d82d      	bhi.n	8002f4c <UART_SetConfig+0x164>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x110>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f4d 	.word	0x08002f4d
 8002f00:	08002f4d 	.word	0x08002f4d
 8002f04:	08002f4d 	.word	0x08002f4d
 8002f08:	08002f3d 	.word	0x08002f3d
 8002f0c:	08002f4d 	.word	0x08002f4d
 8002f10:	08002f4d 	.word	0x08002f4d
 8002f14:	08002f4d 	.word	0x08002f4d
 8002f18:	08002f35 	.word	0x08002f35
 8002f1c:	08002f4d 	.word	0x08002f4d
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08002f4d 	.word	0x08002f4d
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f32:	e098      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f34:	2302      	movs	r3, #2
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f3a:	e094      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f42:	e090      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f44:	2308      	movs	r3, #8
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f4a:	e08c      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f52:	e088      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a5f      	ldr	r2, [pc, #380]	; (80030d8 <UART_SetConfig+0x2f0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d125      	bne.n	8002faa <UART_SetConfig+0x1c2>
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <UART_SetConfig+0x2e8>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f68:	2b30      	cmp	r3, #48	; 0x30
 8002f6a:	d016      	beq.n	8002f9a <UART_SetConfig+0x1b2>
 8002f6c:	2b30      	cmp	r3, #48	; 0x30
 8002f6e:	d818      	bhi.n	8002fa2 <UART_SetConfig+0x1ba>
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d00a      	beq.n	8002f8a <UART_SetConfig+0x1a2>
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d814      	bhi.n	8002fa2 <UART_SetConfig+0x1ba>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <UART_SetConfig+0x19a>
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d008      	beq.n	8002f92 <UART_SetConfig+0x1aa>
 8002f80:	e00f      	b.n	8002fa2 <UART_SetConfig+0x1ba>
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f88:	e06d      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f90:	e069      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f92:	2304      	movs	r3, #4
 8002f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f98:	e065      	b.n	8003066 <UART_SetConfig+0x27e>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa0:	e061      	b.n	8003066 <UART_SetConfig+0x27e>
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fa8:	e05d      	b.n	8003066 <UART_SetConfig+0x27e>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <UART_SetConfig+0x2f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d125      	bne.n	8003000 <UART_SetConfig+0x218>
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <UART_SetConfig+0x2e8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002fc0:	d016      	beq.n	8002ff0 <UART_SetConfig+0x208>
 8002fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fc4:	d818      	bhi.n	8002ff8 <UART_SetConfig+0x210>
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d00a      	beq.n	8002fe0 <UART_SetConfig+0x1f8>
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d814      	bhi.n	8002ff8 <UART_SetConfig+0x210>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <UART_SetConfig+0x1f0>
 8002fd2:	2b40      	cmp	r3, #64	; 0x40
 8002fd4:	d008      	beq.n	8002fe8 <UART_SetConfig+0x200>
 8002fd6:	e00f      	b.n	8002ff8 <UART_SetConfig+0x210>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fde:	e042      	b.n	8003066 <UART_SetConfig+0x27e>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fe6:	e03e      	b.n	8003066 <UART_SetConfig+0x27e>
 8002fe8:	2304      	movs	r3, #4
 8002fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fee:	e03a      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ff6:	e036      	b.n	8003066 <UART_SetConfig+0x27e>
 8002ff8:	2310      	movs	r3, #16
 8002ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ffe:	e032      	b.n	8003066 <UART_SetConfig+0x27e>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a30      	ldr	r2, [pc, #192]	; (80030c8 <UART_SetConfig+0x2e0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12a      	bne.n	8003060 <UART_SetConfig+0x278>
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <UART_SetConfig+0x2e8>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003018:	d01a      	beq.n	8003050 <UART_SetConfig+0x268>
 800301a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800301e:	d81b      	bhi.n	8003058 <UART_SetConfig+0x270>
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d00c      	beq.n	8003040 <UART_SetConfig+0x258>
 8003026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302a:	d815      	bhi.n	8003058 <UART_SetConfig+0x270>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <UART_SetConfig+0x250>
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003034:	d008      	beq.n	8003048 <UART_SetConfig+0x260>
 8003036:	e00f      	b.n	8003058 <UART_SetConfig+0x270>
 8003038:	2300      	movs	r3, #0
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800303e:	e012      	b.n	8003066 <UART_SetConfig+0x27e>
 8003040:	2302      	movs	r3, #2
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003046:	e00e      	b.n	8003066 <UART_SetConfig+0x27e>
 8003048:	2304      	movs	r3, #4
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800304e:	e00a      	b.n	8003066 <UART_SetConfig+0x27e>
 8003050:	2308      	movs	r3, #8
 8003052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003056:	e006      	b.n	8003066 <UART_SetConfig+0x27e>
 8003058:	2310      	movs	r3, #16
 800305a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305e:	e002      	b.n	8003066 <UART_SetConfig+0x27e>
 8003060:	2310      	movs	r3, #16
 8003062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <UART_SetConfig+0x2e0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	f040 80a8 	bne.w	80031c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003076:	2b08      	cmp	r3, #8
 8003078:	d834      	bhi.n	80030e4 <UART_SetConfig+0x2fc>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0x298>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030e5 	.word	0x080030e5
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030e5 	.word	0x080030e5
 8003090:	080030b3 	.word	0x080030b3
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080030e5 	.word	0x080030e5
 800309c:	080030e5 	.word	0x080030e5
 80030a0:	080030bb 	.word	0x080030bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7fe fd44 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030aa:	e021      	b.n	80030f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ac:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <UART_SetConfig+0x2f8>)
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030b0:	e01e      	b.n	80030f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b2:	f7fe fccf 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80030b8:	e01a      	b.n	80030f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80030c0:	e016      	b.n	80030f0 <UART_SetConfig+0x308>
 80030c2:	bf00      	nop
 80030c4:	cfff69f3 	.word	0xcfff69f3
 80030c8:	40008000 	.word	0x40008000
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40004400 	.word	0x40004400
 80030d8:	40004800 	.word	0x40004800
 80030dc:	40004c00 	.word	0x40004c00
 80030e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80030ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 812a 	beq.w	800334c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	4a9e      	ldr	r2, [pc, #632]	; (8003378 <UART_SetConfig+0x590>)
 80030fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003102:	461a      	mov	r2, r3
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	fbb3 f3f2 	udiv	r3, r3, r2
 800310a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	429a      	cmp	r2, r3
 800311a:	d305      	bcc.n	8003128 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	429a      	cmp	r2, r3
 8003126:	d903      	bls.n	8003130 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800312e:	e10d      	b.n	800334c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	2200      	movs	r2, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	60fa      	str	r2, [r7, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	4a8e      	ldr	r2, [pc, #568]	; (8003378 <UART_SetConfig+0x590>)
 800313e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003142:	b29b      	uxth	r3, r3
 8003144:	2200      	movs	r2, #0
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	607a      	str	r2, [r7, #4]
 800314a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800314e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003152:	f7fd f861 	bl	8000218 <__aeabi_uldivmod>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	020b      	lsls	r3, r1, #8
 8003168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800316c:	0202      	lsls	r2, r0, #8
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	6849      	ldr	r1, [r1, #4]
 8003172:	0849      	lsrs	r1, r1, #1
 8003174:	2000      	movs	r0, #0
 8003176:	460c      	mov	r4, r1
 8003178:	4605      	mov	r5, r0
 800317a:	eb12 0804 	adds.w	r8, r2, r4
 800317e:	eb43 0905 	adc.w	r9, r3, r5
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	469a      	mov	sl, r3
 800318a:	4693      	mov	fp, r2
 800318c:	4652      	mov	r2, sl
 800318e:	465b      	mov	r3, fp
 8003190:	4640      	mov	r0, r8
 8003192:	4649      	mov	r1, r9
 8003194:	f7fd f840 	bl	8000218 <__aeabi_uldivmod>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4613      	mov	r3, r2
 800319e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a6:	d308      	bcc.n	80031ba <UART_SetConfig+0x3d2>
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ae:	d204      	bcs.n	80031ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	e0c8      	b.n	800334c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031c0:	e0c4      	b.n	800334c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ca:	d167      	bne.n	800329c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80031cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d828      	bhi.n	8003226 <UART_SetConfig+0x43e>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0x3f4>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003201 	.word	0x08003201
 80031e0:	08003209 	.word	0x08003209
 80031e4:	08003211 	.word	0x08003211
 80031e8:	08003227 	.word	0x08003227
 80031ec:	08003217 	.word	0x08003217
 80031f0:	08003227 	.word	0x08003227
 80031f4:	08003227 	.word	0x08003227
 80031f8:	08003227 	.word	0x08003227
 80031fc:	0800321f 	.word	0x0800321f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7fe fc96 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003206:	e014      	b.n	8003232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003208:	f7fe fca8 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800320e:	e010      	b.n	8003232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003210:	4b5a      	ldr	r3, [pc, #360]	; (800337c <UART_SetConfig+0x594>)
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003214:	e00d      	b.n	8003232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003216:	f7fe fc1d 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 800321a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800321c:	e009      	b.n	8003232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003224:	e005      	b.n	8003232 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8089 	beq.w	800334c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	4a4e      	ldr	r2, [pc, #312]	; (8003378 <UART_SetConfig+0x590>)
 8003240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003244:	461a      	mov	r2, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	fbb3 f3f2 	udiv	r3, r3, r2
 800324c:	005a      	lsls	r2, r3, #1
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	441a      	add	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	fbb2 f3f3 	udiv	r3, r2, r3
 800325e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d916      	bls.n	8003294 <UART_SetConfig+0x4ac>
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326c:	d212      	bcs.n	8003294 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f023 030f 	bic.w	r3, r3, #15
 8003276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b29a      	uxth	r2, r3
 8003284:	8bfb      	ldrh	r3, [r7, #30]
 8003286:	4313      	orrs	r3, r2
 8003288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	8bfa      	ldrh	r2, [r7, #30]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	e05b      	b.n	800334c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800329a:	e057      	b.n	800334c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800329c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d828      	bhi.n	80032f6 <UART_SetConfig+0x50e>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0x4c4>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032d9 	.word	0x080032d9
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	080032f7 	.word	0x080032f7
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	080032f7 	.word	0x080032f7
 80032c4:	080032f7 	.word	0x080032f7
 80032c8:	080032f7 	.word	0x080032f7
 80032cc:	080032ef 	.word	0x080032ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d0:	f7fe fc2e 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 80032d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032d6:	e014      	b.n	8003302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7fe fc40 	bl	8001b5c <HAL_RCC_GetPCLK2Freq>
 80032dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032de:	e010      	b.n	8003302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <UART_SetConfig+0x594>)
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032e4:	e00d      	b.n	8003302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7fe fbb5 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 80032ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ec:	e009      	b.n	8003302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032f4:	e005      	b.n	8003302 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003300:	bf00      	nop
    }

    if (pclk != 0U)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d021      	beq.n	800334c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <UART_SetConfig+0x590>)
 800330e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003312:	461a      	mov	r2, r3
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	fbb3 f2f2 	udiv	r2, r3, r2
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	441a      	add	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	fbb2 f3f3 	udiv	r3, r2, r3
 800332a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	d909      	bls.n	8003346 <UART_SetConfig+0x55e>
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d205      	bcs.n	8003346 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	b29a      	uxth	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e002      	b.n	800334c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2201      	movs	r2, #1
 8003350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2201      	movs	r2, #1
 8003358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2200      	movs	r2, #0
 8003360:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003368:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800336c:	4618      	mov	r0, r3
 800336e:	3730      	adds	r7, #48	; 0x30
 8003370:	46bd      	mov	sp, r7
 8003372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003376:	bf00      	nop
 8003378:	08004114 	.word	0x08004114
 800337c:	00f42400 	.word	0x00f42400

08003380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01a      	beq.n	8003496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347e:	d10a      	bne.n	8003496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b098      	sub	sp, #96	; 0x60
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034d4:	f7fd f882 	bl	80005dc <HAL_GetTick>
 80034d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d12f      	bne.n	8003548 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f88e 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d022      	beq.n	8003548 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003516:	653b      	str	r3, [r7, #80]	; 0x50
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
 8003522:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800352e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e6      	bne.n	8003502 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e063      	b.n	8003610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d149      	bne.n	80035ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003556:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800355e:	2200      	movs	r2, #0
 8003560:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f857 	bl	8003618 <UART_WaitOnFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03c      	beq.n	80035ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	623b      	str	r3, [r7, #32]
   return(result);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003584:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
 8003590:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e6      	bne.n	8003570 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3308      	adds	r3, #8
 80035c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c2:	61fa      	str	r2, [r7, #28]
 80035c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	69fa      	ldr	r2, [r7, #28]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	617b      	str	r3, [r7, #20]
   return(result);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e012      	b.n	8003610 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3758      	adds	r7, #88	; 0x58
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003628:	e04f      	b.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d04b      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fc ffd3 	bl	80005dc <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <UART_WaitOnFlagUntilTimeout+0x30>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e04e      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	d037      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b80      	cmp	r3, #128	; 0x80
 800365e:	d034      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d031      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b08      	cmp	r3, #8
 8003672:	d110      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2208      	movs	r2, #8
 800367a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f838 	bl	80036f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2208      	movs	r2, #8
 8003686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e029      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a4:	d111      	bne.n	80036ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f81e 	bl	80036f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e00f      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d0a0      	beq.n	800362a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b095      	sub	sp, #84	; 0x54
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	643b      	str	r3, [r7, #64]	; 0x40
 800371a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800371e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e6      	bne.n	80036fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3308      	adds	r3, #8
 8003732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	e853 3f00 	ldrex	r3, [r3]
 800373a:	61fb      	str	r3, [r7, #28]
   return(result);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	64bb      	str	r3, [r7, #72]	; 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e3      	bne.n	800372c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d118      	bne.n	800379e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	60bb      	str	r3, [r7, #8]
   return(result);
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f023 0310 	bic.w	r3, r3, #16
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6979      	ldr	r1, [r7, #20]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	613b      	str	r3, [r7, #16]
   return(result);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e6      	bne.n	800376c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80037b2:	bf00      	nop
 80037b4:	3754      	adds	r7, #84	; 0x54
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7ff faf1 	bl	8002dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	e853 3f00 	ldrex	r3, [r3]
 80037f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	613b      	str	r3, [r7, #16]
   return(result);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e6      	bne.n	80037ea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fabc 	bl	8002da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003830:	bf00      	nop
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UARTEx_DisableFifoMode+0x16>
 8003886:	2302      	movs	r3, #2
 8003888:	e027      	b.n	80038da <HAL_UARTEx_DisableFifoMode+0x66>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80038b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e02d      	b.n	800395a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2224      	movs	r2, #36	; 0x24
 800390a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f850 	bl	80039e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003976:	2302      	movs	r3, #2
 8003978:	e02d      	b.n	80039d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2224      	movs	r2, #36	; 0x24
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f812 	bl	80039e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a00:	e031      	b.n	8003a66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a02:	2308      	movs	r3, #8
 8003a04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a06:	2308      	movs	r3, #8
 8003a08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	0e5b      	lsrs	r3, r3, #25
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	0f5b      	lsrs	r3, r3, #29
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a2a:	7bbb      	ldrb	r3, [r7, #14]
 8003a2c:	7b3a      	ldrb	r2, [r7, #12]
 8003a2e:	4911      	ldr	r1, [pc, #68]	; (8003a74 <UARTEx_SetNbDataToProcess+0x94>)
 8003a30:	5c8a      	ldrb	r2, [r1, r2]
 8003a32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a36:	7b3a      	ldrb	r2, [r7, #12]
 8003a38:	490f      	ldr	r1, [pc, #60]	; (8003a78 <UARTEx_SetNbDataToProcess+0x98>)
 8003a3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	7b7a      	ldrb	r2, [r7, #13]
 8003a4c:	4909      	ldr	r1, [pc, #36]	; (8003a74 <UARTEx_SetNbDataToProcess+0x94>)
 8003a4e:	5c8a      	ldrb	r2, [r1, r2]
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a54:	7b7a      	ldrb	r2, [r7, #13]
 8003a56:	4908      	ldr	r1, [pc, #32]	; (8003a78 <UARTEx_SetNbDataToProcess+0x98>)
 8003a58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	0800412c 	.word	0x0800412c
 8003a78:	08004134 	.word	0x08004134

08003a7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
 8003a8e:	60da      	str	r2, [r3, #12]
 8003a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a96:	4a2b      	ldr	r2, [pc, #172]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a25      	ldr	r2, [pc, #148]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <MX_GPIO_Init+0xc8>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac8:	481f      	ldr	r0, [pc, #124]	; (8003b48 <MX_GPIO_Init+0xcc>)
 8003aca:	f7fd f907 	bl	8000cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8003ace:	f44f 637f 	mov.w	r3, #4080	; 0xff0
 8003ad2:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ad4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ade:	f107 030c 	add.w	r3, r7, #12
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae8:	f7fc ff76 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af2:	2301      	movs	r3, #1
 8003af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	4619      	mov	r1, r3
 8003b04:	4810      	ldr	r0, [pc, #64]	; (8003b48 <MX_GPIO_Init+0xcc>)
 8003b06:	f7fc ff67 	bl	80009d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	200a      	movs	r0, #10
 8003b10:	f7fc fe6d 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b14:	200a      	movs	r0, #10
 8003b16:	f7fc fe84 	bl	8000822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2017      	movs	r0, #23
 8003b20:	f7fc fe65 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b24:	2017      	movs	r0, #23
 8003b26:	f7fc fe7c 	bl	8000822 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	2028      	movs	r0, #40	; 0x28
 8003b30:	f7fc fe5d 	bl	80007ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b34:	2028      	movs	r0, #40	; 0x28
 8003b36:	f7fc fe74 	bl	8000822 <HAL_NVIC_EnableIRQ>

}
 8003b3a:	bf00      	nop
 8003b3c:	3720      	adds	r7, #32
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	48000400 	.word	0x48000400

08003b4c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8003b50:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <MX_LPTIM1_Init+0x58>)
 8003b54:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b62:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b6a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_LPTIM1_Init+0x54>)
 8003b8c:	f7fd f8e2 	bl	8000d54 <HAL_LPTIM_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8003b96:	f000 f8b8 	bl	8003d0a <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2000002c 	.word	0x2000002c
 8003ba4:	40007c00 	.word	0x40007c00

08003ba8 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b094      	sub	sp, #80	; 0x50
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	2244      	movs	r2, #68	; 0x44
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fa72 	bl	80040a2 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_LPTIM_MspInit+0x70>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d122      	bne.n	8003c0e <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bcc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f81c 	bl	8001c14 <HAL_RCCEx_PeriphCLKConfig>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8003be2:	f000 f892 	bl	8003d0a <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <HAL_LPTIM_MspInit+0x74>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bea:	4a0c      	ldr	r2, [pc, #48]	; (8003c1c <HAL_LPTIM_MspInit+0x74>)
 8003bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <HAL_LPTIM_MspInit+0x74>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	2031      	movs	r0, #49	; 0x31
 8003c04:	f7fc fdf3 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003c08:	2031      	movs	r0, #49	; 0x31
 8003c0a:	f7fc fe0a 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3750      	adds	r7, #80	; 0x50
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40007c00 	.word	0x40007c00
 8003c1c:	40021000 	.word	0x40021000

08003c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c24:	f7fc fc76 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c28:	f000 f824 	bl	8003c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c2c:	f7ff ff26 	bl	8003a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003c30:	f000 f962 	bl	8003ef8 <MX_USART2_UART_Init>
  MX_LPTIM1_Init();
 8003c34:	f7ff ff8a 	bl	8003b4c <MX_LPTIM1_Init>
  MX_TIM16_Init();
 8003c38:	f000 f912 	bl	8003e60 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // Init
  txBuffer[0] = 'B';
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <main+0x4c>)
 8003c3e:	2242      	movs	r2, #66	; 0x42
 8003c40:	701a      	strb	r2, [r3, #0]
  txBuffer[1] = '\r';
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <main+0x4c>)
 8003c44:	220d      	movs	r2, #13
 8003c46:	705a      	strb	r2, [r3, #1]
  txBuffer[2] = '\n';
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <main+0x4c>)
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	709a      	strb	r2, [r3, #2]
  txBuffer[3] = '\0';
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <main+0x4c>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	70da      	strb	r2, [r3, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart2, txBuffer, 4, 1000);
 8003c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c58:	2204      	movs	r2, #4
 8003c5a:	4904      	ldr	r1, [pc, #16]	; (8003c6c <main+0x4c>)
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <main+0x50>)
 8003c5e:	f7fe fcd3 	bl	8002608 <HAL_UART_Transmit>
	HAL_Delay(100);
 8003c62:	2064      	movs	r0, #100	; 0x64
 8003c64:	f7fc fcc6 	bl	80005f4 <HAL_Delay>
	HAL_UART_Transmit(&huart2, txBuffer, 4, 1000);
 8003c68:	e7f4      	b.n	8003c54 <main+0x34>
 8003c6a:	bf00      	nop
 8003c6c:	20000064 	.word	0x20000064
 8003c70:	200000c4 	.word	0x200000c4

08003c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b094      	sub	sp, #80	; 0x50
 8003c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c7a:	f107 0318 	add.w	r3, r7, #24
 8003c7e:	2238      	movs	r2, #56	; 0x38
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fa0d 	bl	80040a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	605a      	str	r2, [r3, #4]
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	60da      	str	r2, [r3, #12]
 8003c94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fd f9da 	bl	8001050 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ca6:	2340      	movs	r3, #64	; 0x40
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003caa:	2302      	movs	r3, #2
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003cb6:	2355      	movs	r3, #85	; 0x55
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cc6:	f107 0318 	add.w	r3, r7, #24
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fd fa74 	bl	80011b8 <HAL_RCC_OscConfig>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003cd6:	f000 f818 	bl	8003d0a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cda:	230f      	movs	r3, #15
 8003cdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fd72 	bl	80017dc <HAL_RCC_ClockConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003cfe:	f000 f804 	bl	8003d0a <Error_Handler>
  }
}
 8003d02:	bf00      	nop
 8003d04:	3750      	adds	r7, #80	; 0x50
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i
}
 8003d10:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d12:	e7fe      	b.n	8003d12 <Error_Handler+0x8>

08003d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_MspInit+0x44>)
 8003d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_MspInit+0x44>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	6613      	str	r3, [r2, #96]	; 0x60
 8003d26:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <HAL_MspInit+0x44>)
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_MspInit+0x44>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <HAL_MspInit+0x44>)
 8003d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <HAL_MspInit+0x44>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	603b      	str	r3, [r7, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003d4a:	f7fd fa25 	bl	8001198 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000

08003d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d60:	e7fe      	b.n	8003d60 <NMI_Handler+0x4>

08003d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d66:	e7fe      	b.n	8003d66 <HardFault_Handler+0x4>

08003d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d6c:	e7fe      	b.n	8003d6c <MemManage_Handler+0x4>

08003d6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d72:	e7fe      	b.n	8003d72 <BusFault_Handler+0x4>

08003d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <UsageFault_Handler+0x4>

08003d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d8c:	bf00      	nop
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d96:	b480      	push	{r7}
 8003d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003da8:	f7fc fc06 	bl	80005b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dac:	bf00      	nop
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003db4:	2010      	movs	r0, #16
 8003db6:	f7fc ffa9 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8003dc2:	2020      	movs	r0, #32
 8003dc4:	f7fc ffa2 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003dc8:	2040      	movs	r0, #64	; 0x40
 8003dca:	f7fc ff9f 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003dce:	2080      	movs	r0, #128	; 0x80
 8003dd0:	f7fc ff9c 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003dd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003dd8:	f7fc ff98 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003ddc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003de0:	f7fc ff94 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003de4:	bf00      	nop
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003dec:	4802      	ldr	r0, [pc, #8]	; (8003df8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003dee:	f7fe f958 	bl	80020a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003df2:	bf00      	nop
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000078 	.word	0x20000078

08003dfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <USART2_IRQHandler+0x10>)
 8003e02:	f7fe fc8f 	bl	8002724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e06:	bf00      	nop
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200000c4 	.word	0x200000c4

08003e10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e18:	f7fc ff78 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003e1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003e20:	f7fc ff74 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <LPTIM1_IRQHandler+0x10>)
 8003e2e:	f7fd f82d 	bl	8000e8c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000002c 	.word	0x2000002c

08003e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <SystemInit+0x20>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <SystemInit+0x20>)
 8003e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000ed00 	.word	0xe000ed00

08003e60 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003e64:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <MX_TIM16_Init+0x48>)
 8003e68:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 50;
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e6c:	2232      	movs	r2, #50	; 0x32
 8003e6e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8003e76:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e7c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003e84:	4b07      	ldr	r3, [pc, #28]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003e90:	4804      	ldr	r0, [pc, #16]	; (8003ea4 <MX_TIM16_Init+0x44>)
 8003e92:	f7fe f8af 	bl	8001ff4 <HAL_TIM_Base_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003e9c:	f7ff ff35 	bl	8003d0a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20000078 	.word	0x20000078
 8003ea8:	40014400 	.word	0x40014400

08003eac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0d      	ldr	r2, [pc, #52]	; (8003ef0 <HAL_TIM_Base_MspInit+0x44>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d113      	bne.n	8003ee6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_TIM_Base_MspInit+0x48>)
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <HAL_TIM_Base_MspInit+0x48>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	6613      	str	r3, [r2, #96]	; 0x60
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_TIM_Base_MspInit+0x48>)
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2019      	movs	r0, #25
 8003edc:	f7fc fc87 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003ee0:	2019      	movs	r0, #25
 8003ee2:	f7fc fc9e 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40021000 	.word	0x40021000

08003ef8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003efe:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <MX_USART2_UART_Init+0x94>)
 8003f00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f1e:	220c      	movs	r2, #12
 8003f20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f40:	4811      	ldr	r0, [pc, #68]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f42:	f7fe fb11 	bl	8002568 <HAL_UART_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003f4c:	f7ff fedd 	bl	8003d0a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f50:	2100      	movs	r1, #0
 8003f52:	480d      	ldr	r0, [pc, #52]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f54:	f7ff fcc7 	bl	80038e6 <HAL_UARTEx_SetTxFifoThreshold>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003f5e:	f7ff fed4 	bl	8003d0a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f62:	2100      	movs	r1, #0
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f66:	f7ff fcfc 	bl	8003962 <HAL_UARTEx_SetRxFifoThreshold>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003f70:	f7ff fecb 	bl	8003d0a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f74:	4804      	ldr	r0, [pc, #16]	; (8003f88 <MX_USART2_UART_Init+0x90>)
 8003f76:	f7ff fc7d 	bl	8003874 <HAL_UARTEx_DisableFifoMode>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003f80:	f7ff fec3 	bl	8003d0a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200000c4 	.word	0x200000c4
 8003f8c:	40004400 	.word	0x40004400

08003f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b09a      	sub	sp, #104	; 0x68
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	609a      	str	r2, [r3, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
 8003fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	2244      	movs	r2, #68	; 0x44
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f876 	bl	80040a2 <memset>
  if(uartHandle->Instance==USART2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a23      	ldr	r2, [pc, #140]	; (8004048 <HAL_UART_MspInit+0xb8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d13e      	bne.n	800403e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd fe21 	bl	8001c14 <HAL_RCCEx_PeriphCLKConfig>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fd8:	f7ff fe97 	bl	8003d0a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_UART_MspInit+0xbc>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a1a      	ldr	r2, [pc, #104]	; (800404c <HAL_UART_MspInit+0xbc>)
 8003fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_UART_MspInit+0xbc>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_UART_MspInit+0xbc>)
 8003ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <HAL_UART_MspInit+0xbc>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_UART_MspInit+0xbc>)
 8004002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800400c:	230c      	movs	r3, #12
 800400e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004018:	2300      	movs	r3, #0
 800401a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800401c:	2307      	movs	r3, #7
 800401e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004024:	4619      	mov	r1, r3
 8004026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800402a:	f7fc fcd5 	bl	80009d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	2026      	movs	r0, #38	; 0x26
 8004034:	f7fc fbdb 	bl	80007ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004038:	2026      	movs	r0, #38	; 0x26
 800403a:	f7fc fbf2 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800403e:	bf00      	nop
 8004040:	3768      	adds	r7, #104	; 0x68
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40004400 	.word	0x40004400
 800404c:	40021000 	.word	0x40021000

08004050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004050:	480d      	ldr	r0, [pc, #52]	; (8004088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004052:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004054:	f7ff fef2 	bl	8003e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004058:	480c      	ldr	r0, [pc, #48]	; (800408c <LoopForever+0x6>)
  ldr r1, =_edata
 800405a:	490d      	ldr	r1, [pc, #52]	; (8004090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800405c:	4a0d      	ldr	r2, [pc, #52]	; (8004094 <LoopForever+0xe>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004060:	e002      	b.n	8004068 <LoopCopyDataInit>

08004062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004066:	3304      	adds	r3, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800406c:	d3f9      	bcc.n	8004062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004070:	4c0a      	ldr	r4, [pc, #40]	; (800409c <LoopForever+0x16>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004074:	e001      	b.n	800407a <LoopFillZerobss>

08004076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004078:	3204      	adds	r2, #4

0800407a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800407c:	d3fb      	bcc.n	8004076 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800407e:	f000 f819 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004082:	f7ff fdcd 	bl	8003c20 <main>

08004086 <LoopForever>:

LoopForever:
    b LoopForever
 8004086:	e7fe      	b.n	8004086 <LoopForever>
  ldr   r0, =_estack
 8004088:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800408c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004090:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004094:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8004098:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800409c:	20000158 	.word	0x20000158

080040a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040a0:	e7fe      	b.n	80040a0 <ADC1_2_IRQHandler>

080040a2 <memset>:
 80040a2:	4402      	add	r2, r0
 80040a4:	4603      	mov	r3, r0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d100      	bne.n	80040ac <memset+0xa>
 80040aa:	4770      	bx	lr
 80040ac:	f803 1b01 	strb.w	r1, [r3], #1
 80040b0:	e7f9      	b.n	80040a6 <memset+0x4>
	...

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	; (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	; (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	; (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	; (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 f818 	bl	80040fc <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	0800415c 	.word	0x0800415c
 80040f0:	0800415c 	.word	0x0800415c
 80040f4:	0800415c 	.word	0x0800415c
 80040f8:	08004160 	.word	0x08004160

080040fc <_init>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	bf00      	nop
 8004100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004102:	bc08      	pop	{r3}
 8004104:	469e      	mov	lr, r3
 8004106:	4770      	bx	lr

08004108 <_fini>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr
